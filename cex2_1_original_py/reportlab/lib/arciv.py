# uncompyle6 version 3.9.0
# Python bytecode version base 2.7 (62211)
# Decompiled from: Python 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  8 2023, 10:42:25) [MSC v.1916 64 bit (AMD64)]
# Embedded file name: reportlab\lib\arciv.pyc
# Compiled at: 2013-03-27 15:37:42
"""
Arciv Stream  ciphering
"""
__version__ = ' $Id$ '
from types import StringType

class ArcIV:
    """
        performs 'ArcIV' Stream Encryption of S using key
        Based on what is widely thought to be RSA's ArcIV algorithm.
        It produces output streams that are identical.

        NB there is no separate decoder arciv(arciv(s,key),key) == s
        """

    def __init__(self, key):
        self._key = key
        self.reset()

    def reset(self):
        """restore the cipher to it's start state"""
        key = self._key
        sbox = range(256)
        k = range(256)
        lk = len(key)
        for i in sbox:
            k[i] = ord(key[i % lk]) % 256

        j = 0
        for i in xrange(256):
            j = (j + sbox[i] + k[i]) % 256
            sbox[i], sbox[j] = sbox[j], sbox[i]

        self._sbox, self._i, self._j = sbox, 0, 0

    def _encode(self, B):
        """
                return the list of encoded bytes of B, B might be a string or a
                list of integers between 0 <= i <= 255
                """
        sbox, i, j = self._sbox, self._i, self._j
        C = type(B) is StringType and map(ord, B) or B[:]
        n = len(C)
        p = 0
        while p < n:
            self._i = i = (i + 1) % 256
            self._j = j = (j + sbox[i]) % 256
            sbox[i], sbox[j] = sbox[j], sbox[i]
            C[p] = C[p] ^ sbox[(sbox[i] + sbox[j]) % 256]
            p = p + 1

        return C

    def encode(self, S):
        """ArcIV encode string S"""
        return ('').join(map(chr, self._encode(S)))


_TESTS = [
 {'key': b'\x01#Eg\x89\xab\xcd\xef', 
    'input': b'\x01#Eg\x89\xab\xcd\xef', 
    'output': b'u\xb7\x87\x80\x99\xe0\xc5\x96'},
 {'key': b'\x01#Eg\x89\xab\xcd\xef', 
    'input': '\x00\x00\x00\x00\x00\x00\x00\x00', 
    'output': b't\x94\xc2\xe7\x10K\x08y'},
 {'key': '\x00\x00\x00\x00\x00\x00\x00\x00', 
    'input': '\x00\x00\x00\x00\x00\x00\x00\x00', 
    'output': b'\xde\x18\x89A\xa37]:'},
 {'key': b'\xef\x01#E', 
    'input': '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00', 
    'output': b'\xd6\xa1A\xa7\xec<8\xdf\xbda'},
 {'key': b'\x01#Eg\x89\xab\xcd\xef', 
    'input': '\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01', 
    'output': b'u\x95\xc3\xe6\x11J\tx\x0cJ\xd4R3\x8e\x1f\xfd\x9a\x1b\xe9I\x8f\x81=vS4I\xb6w\x8d\xca\xd8\xc7\x8a\x8d+\xa9\xacf\x08]\x0eS\xd5\x9c&\xc2\xd1\xc4\x90\xc1\xeb\xbe\x0c\xe6m\x1bk\x1b\x13\xb6\xb9\x19\xb8G\xc2Z\x91Dz\x95\xe7^N\xf1gy\xcd\xe8\xbf\n\x95\x85\x0e2\xaf\x96\x89DO\xd3w\x10\x8f\x98\xfd\xcb\xd4\xe7&Vu\x00\x99\x0b\xcc~\x0c\xa3\xc4\xaa\xa3\x04\xa3\x87\xd2\x0f;\x8f\xbb\xcdB\xa1\xbd1\x1dzC\x03\xdd\xa5\xab\x07\x88\x96\xae\x80\xc1\x8b\n\xf6m\xff1\x96\x16\xebxNIZ\xd2\xce\x90\xd7\xf7r\xa8\x17G\xb6_b\t;\x1e\r\xb9\xe5\xbaS/\xaf\xecGP\x83#\xe6q2}\xf9DD2\xcbsg\xce\xc8/]D\xc0\xd0\x0bg\xd6P\xa0u\xcdKp\xde\xddw\xeb\x9b\x10#\x1bk[t\x13G9mb\x89t!\xd4=\xf9\xb4.Dn5\x8e\x9c\x11\xa9\xb2\x18N\xcb\xef\x0c\xd8\xe7\xa8w\xef\x96\x8f\x13\x90\xec\x9b=5\xa5X\\\xb0\t)\x0e/\xcd\xe7\xb5\xecf\xd9\x08K\xe4@U\xa6\x19\xd9\xdd\x7f\xc3\x16o\x94\x87\xf7\xcb\')\x12BdE\x99\x85\x14\xc1]S\xa1\x8c\x86L\xe3\xa2\xb7UW\x93\x98\x81&R\x0e\xac\xf2\xe3\x06n#\x0c\x91\xbe\xe4\xddS\x04\xf5\xfd\x04\x05\xb3[\xd9\x9cs\x13]=\x9b\xc35\xee\x04\x9e\xf6\x9b8g\xbf-{\xd1\xea\xa5\x95\xd8\xbf\xc0\x06o\xf8\xd3\x15\t\xeb\x0cl\xaa\x00l\x80zb>\xf8L=3\xc1\x95\xd2>\xe3 \xc4\r\xe0U\x81W\xc8"\xd4\xb8\xc5i\xd8I\xae\xd5\x9dN\x0f\xd7\xf3yXkK\x7f\xf6\x84\xedj\x18\x9ft\x86\xd4\x9b\x9cK\xad\x9b\xa2K\x96\xab\xf9$7,\x8a\x8f\xff\xb1\rU5I\x00\xa7z=\xb5\xf2\x05\xe1\xb9\x9f\xcd\x86`\x86:\x15\x9a\xd4\xab\xe4\x0f\xa4\x894\x16=\xdd\xe5B\xa6XU@\xfdh<\xbf\xd8\xc0\x0f\x12\x12\x9a(M\xea\xccL\xde\xfeX\xbeq7T\x1c\x04q&\xc8\xd4\x9e\'U\xab\x18\x1a\xb7\xe9@\xb0\xc0'}]

def encode(text, key):
    """One-line shortcut for making an encoder object"""
    return ArcIV(key).encode(text)


def decode(text, key):
    """One-line shortcut for decoding"""
    return ArcIV(key).encode(text)


if __name__ == '__main__':
    i = 0
    for t in _TESTS:
        o = ArcIV(t['key']).encode(t['input'])
        print 'Forward test %d %s!' % (i, o != t['output'] and 'failed' or 'succeeded')
        o = ArcIV(t['key']).encode(t['output'])
        print 'Reverse test %d %s!' % (i, o != t['input'] and 'failed' or 'succeeded')
        i += 1