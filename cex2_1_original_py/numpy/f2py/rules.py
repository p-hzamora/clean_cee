# uncompyle6 version 3.9.0
# Python bytecode version base 2.7 (62211)
# Decompiled from: Python 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  8 2023, 10:42:25) [MSC v.1916 64 bit (AMD64)]
# Embedded file name: numpy\f2py\rules.pyc
# Compiled at: 2013-04-07 07:04:04
"""

Rules for building C/API module with f2py2e.

Here is a skeleton of a new wrapper function (13Dec2001):

wrapper_function(args)
  declarations
  get_python_arguments, say, `a' and `b'

  get_a_from_python
  if (successful) {

    get_b_from_python
    if (successful) {

      callfortran
      if (succesful) {

        put_a_to_python
        if (succesful) {

          put_b_to_python
          if (succesful) {

            buildvalue = ...

          }

        }

      }

    }
    cleanup_b

  }
  cleanup_a

  return buildvalue
"""
__version__ = '$Revision: 1.129 $'[10:-1]
import __version__
f2py_version = __version__.version
import pprint, sys, time, types, copy
errmess = sys.stderr.write
outmess = sys.stdout.write
show = pprint.pprint
from ...auxfuncs import *
import capi_maps
from ...capi_maps import *
import cfuncs, common_rules, use_rules, f90mod_rules, func2subr
options = {}
sepdict = {}
for k in ['decl', 
 'frompyobj', 
 'cleanupfrompyobj', 
 'topyarr', 'method', 
 'pyobjfrom', 
 'closepyobjfrom', 
 'freemem', 
 'userincludes', 
 'includes0', 'includes', 
 'typedefs', 'typedefs_generated', 
 'cppmacros', 'cfuncs', 'callbacks', 
 'latexdoc', 
 'restdoc', 
 'routine_defs', 
 'externroutines', 
 'initf2pywraphooks', 
 'commonhooks', 'initcommonhooks', 
 'f90modhooks', 
 'initf90modhooks']:
    sepdict[k] = '\n'

module_rules = {'modulebody': '/* File: #modulename#module.c\n * This file is auto-generated with f2py (version:#f2py_version#).\n * f2py is a Fortran to Python Interface Generator (FPIG), Second Edition,\n * written by Pearu Peterson <pearu@cens.ioc.ee>.\n * See http://cens.ioc.ee/projects/f2py2e/\n * Generation date: ' + time.asctime(time.localtime(time.time())) + '\n * $R' + 'evision:$\n * $D' + 'ate:$\n * Do not edit this file directly unless you know what you are doing!!!\n */\n#ifdef __cplusplus\nextern "C" {\n#endif\n\n' + gentitle('See f2py2e/cfuncs.py: includes') + '\n#includes#\n#includes0#\n\n' + gentitle("See f2py2e/rules.py: mod_rules['modulebody']") + '\nstatic PyObject *#modulename#_error;\nstatic PyObject *#modulename#_module;\n\n' + gentitle('See f2py2e/cfuncs.py: typedefs') + '\n#typedefs#\n\n' + gentitle('See f2py2e/cfuncs.py: typedefs_generated') + '\n#typedefs_generated#\n\n' + gentitle('See f2py2e/cfuncs.py: cppmacros') + '\n#cppmacros#\n\n' + gentitle('See f2py2e/cfuncs.py: cfuncs') + '\n#cfuncs#\n\n' + gentitle('See f2py2e/cfuncs.py: userincludes') + '\n#userincludes#\n\n' + gentitle('See f2py2e/capi_rules.py: usercode') + '\n#usercode#\n\n/* See f2py2e/rules.py */\n#externroutines#\n\n' + gentitle('See f2py2e/capi_rules.py: usercode1') + '\n#usercode1#\n\n' + gentitle('See f2py2e/cb_rules.py: buildcallback') + '\n#callbacks#\n\n' + gentitle('See f2py2e/rules.py: buildapi') + '\n#body#\n\n' + gentitle('See f2py2e/f90mod_rules.py: buildhooks') + '\n#f90modhooks#\n\n' + gentitle("See f2py2e/rules.py: module_rules['modulebody']") + '\n\n' + gentitle('See f2py2e/common_rules.py: buildhooks') + '\n#commonhooks#\n\n' + gentitle('See f2py2e/rules.py') + '\n\nstatic FortranDataDef f2py_routine_defs[] = {\n#routine_defs#\n\t{NULL}\n};\n\nstatic PyMethodDef f2py_module_methods[] = {\n#pymethoddef#\n\t{NULL,NULL}\n};\n\n#if PY_VERSION_HEX >= 0x03000000\nstatic struct PyModuleDef moduledef = {\n\tPyModuleDef_HEAD_INIT,\n\t"#modulename#",\n\tNULL,\n\t-1,\n\tf2py_module_methods,\n\tNULL,\n\tNULL,\n\tNULL,\n\tNULL\n};\n#endif\n\n#if PY_VERSION_HEX >= 0x03000000\n#define RETVAL m\nPyObject *PyInit_#modulename#(void) {\n#else\n#define RETVAL\nPyMODINIT_FUNC init#modulename#(void) {\n#endif\n\tint i;\n\tPyObject *m,*d, *s;\n#if PY_VERSION_HEX >= 0x03000000\n\tm = #modulename#_module = PyModule_Create(&moduledef);\n#else\n\tm = #modulename#_module = Py_InitModule("#modulename#", f2py_module_methods);\n#endif\n\tPy_TYPE(&PyFortran_Type) = &PyType_Type;\n\timport_array();\n\tif (PyErr_Occurred())\n\t\t{PyErr_SetString(PyExc_ImportError, "can\'t initialize module #modulename# (failed to import numpy)"); return RETVAL;}\n\td = PyModule_GetDict(m);\n\ts = PyString_FromString("$R' + 'evision: $");\n\tPyDict_SetItemString(d, "__version__", s);\n#if PY_VERSION_HEX >= 0x03000000\n\ts = PyUnicode_FromString(\n#else\n\ts = PyString_FromString(\n#endif\n\t\t"This module \'#modulename#\' is auto-generated with f2py (version:#f2py_version#).\\nFunctions:\\n"\n#docs#".");\n\tPyDict_SetItemString(d, "__doc__", s);\n\t#modulename#_error = PyErr_NewException ("#modulename#.error", NULL, NULL);\n\tPy_DECREF(s);\n\tfor(i=0;f2py_routine_defs[i].name!=NULL;i++)\n\t\tPyDict_SetItemString(d, f2py_routine_defs[i].name,PyFortranObject_NewAsAttr(&f2py_routine_defs[i]));\n#initf2pywraphooks#\n#initf90modhooks#\n#initcommonhooks#\n#interface_usercode#\n\n#ifdef F2PY_REPORT_ATEXIT\n\tif (! PyErr_Occurred())\n\t\ton_exit(f2py_report_on_exit,(void*)"#modulename#");\n#endif\n\n\treturn RETVAL;\n}\n#ifdef __cplusplus\n}\n#endif\n', 
   'separatorsfor': {'latexdoc': '\n\n', 'restdoc': '\n\n'}, 
   'latexdoc': [
              '\\section{Module \\texttt{#texmodulename#}}\n',
              '#modnote#\n',
              '#latexdoc#'], 
   'restdoc': [
             'Module #modulename#\n' + '=' * 80,
             '\n#restdoc#']}
defmod_rules = [
 {'body': '/*eof body*/', 'method': '/*eof method*/', 
    'externroutines': '/*eof externroutines*/', 
    'routine_defs': '/*eof routine_defs*/', 
    'initf90modhooks': '/*eof initf90modhooks*/', 
    'initf2pywraphooks': '/*eof initf2pywraphooks*/', 
    'initcommonhooks': '/*eof initcommonhooks*/', 
    'latexdoc': '', 
    'restdoc': '', 
    'modnote': {hasnote: '#note#', l_not(hasnote): ''}}]
routine_rules = {'separatorsfor': sepdict, 
   'body': '\n#begintitle#\nstatic char doc_#apiname#[] = "\\\nFunction signature:\\n\\\n\t#docreturn##name#(#docsignatureshort#)\\n\\\n#docstrsigns#";\n/* #declfortranroutine# */\nstatic PyObject *#apiname#(const PyObject *capi_self,\n                           PyObject *capi_args,\n                           PyObject *capi_keywds,\n                           #functype# (*f2py_func)(#callprotoargument#)) {\n\tPyObject * volatile capi_buildvalue = NULL;\n\tvolatile int f2py_success = 1;\n#decl#\n\tstatic char *capi_kwlist[] = {#kwlist##kwlistopt##kwlistxa#NULL};\n#usercode#\n#routdebugenter#\n#ifdef F2PY_REPORT_ATEXIT\nf2py_start_clock();\n#endif\n\tif (!PyArg_ParseTupleAndKeywords(capi_args,capi_keywds,\\\n\t\t"#argformat##keyformat##xaformat#:#pyname#",\\\n\t\tcapi_kwlist#args_capi##keys_capi##keys_xa#))\n\t\treturn NULL;\n#frompyobj#\n/*end of frompyobj*/\n#ifdef F2PY_REPORT_ATEXIT\nf2py_start_call_clock();\n#endif\n#callfortranroutine#\nif (PyErr_Occurred())\n  f2py_success = 0;\n#ifdef F2PY_REPORT_ATEXIT\nf2py_stop_call_clock();\n#endif\n/*end of callfortranroutine*/\n\t\tif (f2py_success) {\n#pyobjfrom#\n/*end of pyobjfrom*/\n\t\tCFUNCSMESS("Building return value.\\n");\n\t\tcapi_buildvalue = Py_BuildValue("#returnformat#"#return#);\n/*closepyobjfrom*/\n#closepyobjfrom#\n\t\t} /*if (f2py_success) after callfortranroutine*/\n/*cleanupfrompyobj*/\n#cleanupfrompyobj#\n\tif (capi_buildvalue == NULL) {\n#routdebugfailure#\n\t} else {\n#routdebugleave#\n\t}\n\tCFUNCSMESS("Freeing memory.\\n");\n#freemem#\n#ifdef F2PY_REPORT_ATEXIT\nf2py_stop_clock();\n#endif\n\treturn capi_buildvalue;\n}\n#endtitle#\n', 
   'routine_defs': '#routine_def#', 
   'initf2pywraphooks': '#initf2pywraphook#', 
   'externroutines': '#declfortranroutine#', 
   'doc': '#docreturn##name#(#docsignature#)', 
   'docshort': '#docreturn##name#(#docsignatureshort#)', 
   'docs': '"\t#docreturn##name#(#docsignature#)\\n"\n', 
   'need': [
          'arrayobject.h', 'CFUNCSMESS', 'MINMAX'], 
   'cppmacros': {debugcapi: '#define DEBUGCFUNCS'}, 'latexdoc': [
              '\\subsection{Wrapper function \\texttt{#texname#}}\n',
              '\n\\noindent{{}\\verb@#docreturn##name#@{}}\\texttt{(#latexdocsignatureshort#)}\n#routnote#\n\n#latexdocstrsigns#\n'], 
   'restdoc': [
             'Wrapped function ``#name#``\n' + '-' * 80]}
rout_rules = [
 {'separatorsfor': {'callfortranroutine': '\n', 'routdebugenter': '\n', 'decl': '\n', 'routdebugleave': '\n', 
                      'routdebugfailure': '\n', 'setjmpbuf': ' || ', 
                      'docstrreq': '\n', 
                      'docstropt': '\n', 'docstrout': '\n', 'docstrcbs': '\n', 
                      'docstrsigns': '\\n"\n"', 'latexdocstrsigns': '\n', 
                      'latexdocstrreq': '\n', 
                      'latexdocstropt': '\n', 'latexdocstrout': '\n', 
                      'latexdocstrcbs': '\n'}, 
    'kwlist': '', 
    'kwlistopt': '', 'callfortran': '', 'callfortranappend': '', 'docsign': '', 
    'docsignopt': '', 'decl': '/*decl*/', 'freemem': '/*freemem*/', 
    'docsignshort': '', 
    'docsignoptshort': '', 'docstrsigns': '', 
    'latexdocstrsigns': '', 'docstrreq': 'Required arguments:', 
    'docstropt': 'Optional arguments:', 
    'docstrout': 'Return objects:', 
    'docstrcbs': 'Call-back functions:', 
    'latexdocstrreq': '\\noindent Required arguments:', 
    'latexdocstropt': '\\noindent Optional arguments:', 
    'latexdocstrout': '\\noindent Return objects:', 
    'latexdocstrcbs': '\\noindent Call-back functions:', 
    'args_capi': '', 
    'keys_capi': '', 'functype': '', 'frompyobj': '/*frompyobj*/', 
    'cleanupfrompyobj': [
                       '/*end of cleanupfrompyobj*/'], 
    'pyobjfrom': '/*pyobjfrom*/', 
    'closepyobjfrom': [
                     '/*end of closepyobjfrom*/'], 
    'topyarr': '/*topyarr*/', 
    'routdebugleave': '/*routdebugleave*/', 'routdebugenter': '/*routdebugenter*/', 
    'routdebugfailure': '/*routdebugfailure*/', 
    'callfortranroutine': '/*callfortranroutine*/', 
    'argformat': '', 
    'keyformat': '', 'need_cfuncs': '', 'docreturn': '', 
    'return': '', 'returnformat': '', 'rformat': '', 'kwlistxa': '', 
    'keys_xa': '', 'xaformat': '', 'docsignxa': '', 'docsignxashort': '', 'initf2pywraphook': '', 
    'routnote': {hasnote: '--- #note#', l_not(hasnote): ''}},
 {'apiname': 'f2py_rout_#modulename#_#name#', 
    'pyname': '#modulename#.#name#', 
    'decl': '', 
    '_check': l_not(ismoduleroutine)},
 {'apiname': 'f2py_rout_#modulename#_#f90modulename#_#name#', 
    'pyname': '#modulename#.#f90modulename#.#name#', 
    'decl': '', 
    '_check': ismoduleroutine},
 {'functype': 'void', 
    'declfortranroutine': {l_and(l_not(l_or(ismoduleroutine, isintent_c)), l_not(isdummyroutine)): 'extern void #F_FUNC#(#fortranname#,#FORTRANNAME#)(#callprotoargument#);', l_and(l_not(ismoduleroutine), isintent_c, l_not(isdummyroutine)): 'extern void #fortranname#(#callprotoargument#);', 
                           ismoduleroutine: '', 
                           isdummyroutine: ''}, 
    'routine_def': {l_not(l_or(ismoduleroutine, isintent_c, isdummyroutine)): '\t{"#name#",-1,{{-1}},0,(char *)#F_FUNC#(#fortranname#,#FORTRANNAME#),(f2py_init_func)#apiname#,doc_#apiname#},', l_and(l_not(ismoduleroutine), isintent_c, l_not(isdummyroutine)): '\t{"#name#",-1,{{-1}},0,(char *)#fortranname#,(f2py_init_func)#apiname#,doc_#apiname#},', 
                    l_and(l_not(ismoduleroutine), isdummyroutine): '\t{"#name#",-1,{{-1}},0,NULL,(f2py_init_func)#apiname#,doc_#apiname#},'}, 
    'need': {l_and(l_not(l_or(ismoduleroutine, isintent_c)), l_not(isdummyroutine)): 'F_FUNC'}, 'callfortranroutine': [{debugcapi: ['\tfprintf(stderr,"debug-capi:Fortran subroutine `#fortranname#(#callfortran#)\'\\n");']},
                         {hasexternals: '\t\tif (#setjmpbuf#) {\n\t\t\tf2py_success = 0;\n\t\t} else {'}, {isthreadsafe: '\t\t\tPy_BEGIN_ALLOW_THREADS'},
                         {hascallstatement: '\t\t\t\t#callstatement#;\n\t\t\t\t/*(*f2py_func)(#callfortran#);*/'}, {l_not(l_or(hascallstatement, isdummyroutine)): '\t\t\t\t(*f2py_func)(#callfortran#);'}, {isthreadsafe: '\t\t\tPy_END_ALLOW_THREADS'}, {hasexternals: '\t\t}'}], 
    '_check': l_and(issubroutine, l_not(issubroutine_wrap))},
 {'functype': 'void', 
    'declfortranroutine': {l_not(l_or(ismoduleroutine, isdummyroutine)): 'extern void #F_WRAPPEDFUNC#(#name_lower#,#NAME#)(#callprotoargument#);', isdummyroutine: ''}, 
    'routine_def': {l_not(l_or(ismoduleroutine, isdummyroutine)): '\t{"#name#",-1,{{-1}},0,(char *)#F_WRAPPEDFUNC#(#name_lower#,#NAME#),(f2py_init_func)#apiname#,doc_#apiname#},', isdummyroutine: '\t{"#name#",-1,{{-1}},0,NULL,(f2py_init_func)#apiname#,doc_#apiname#},'}, 
    'initf2pywraphook': {l_not(l_or(ismoduleroutine, isdummyroutine)): '\n    {\n      extern #ctype# #F_FUNC#(#name_lower#,#NAME#)(void);\n      PyObject* o = PyDict_GetItemString(d,"#name#");\n      PyObject_SetAttrString(o,"_cpointer", F2PyCapsule_FromVoidPtr((void*)#F_FUNC#(#name_lower#,#NAME#),NULL));\n#if PY_VERSION_HEX >= 0x03000000\n      PyObject_SetAttrString(o,"__name__", PyUnicode_FromString("#name#"));\n#else\n      PyObject_SetAttrString(o,"__name__", PyString_FromString("#name#"));\n#endif\n    }\n    '}, 
    'need': {l_not(l_or(ismoduleroutine, isdummyroutine)): ['F_WRAPPEDFUNC', 'F_FUNC']}, 'callfortranroutine': [{debugcapi: ['\tfprintf(stderr,"debug-capi:Fortran subroutine `f2pywrap#name_lower#(#callfortran#)\'\\n");']},
                         {hasexternals: '\tif (#setjmpbuf#) {\n\t\tf2py_success = 0;\n\t} else {'}, {isthreadsafe: '\tPy_BEGIN_ALLOW_THREADS'}, {l_not(l_or(hascallstatement, isdummyroutine)): '\t(*f2py_func)(#callfortran#);'}, {hascallstatement: '\t#callstatement#;\n\t/*(*f2py_func)(#callfortran#);*/'}, {isthreadsafe: '\tPy_END_ALLOW_THREADS'}, {hasexternals: '\t}'}], 
    '_check': isfunction_wrap},
 {'functype': 'void', 
    'declfortranroutine': {l_not(l_or(ismoduleroutine, isdummyroutine)): 'extern void #F_WRAPPEDFUNC#(#name_lower#,#NAME#)(#callprotoargument#);', isdummyroutine: ''}, 
    'routine_def': {l_not(l_or(ismoduleroutine, isdummyroutine)): '\t{"#name#",-1,{{-1}},0,(char *)#F_WRAPPEDFUNC#(#name_lower#,#NAME#),(f2py_init_func)#apiname#,doc_#apiname#},', isdummyroutine: '\t{"#name#",-1,{{-1}},0,NULL,(f2py_init_func)#apiname#,doc_#apiname#},'}, 
    'initf2pywraphook': {l_not(l_or(ismoduleroutine, isdummyroutine)): '\n    {\n      extern void #F_FUNC#(#name_lower#,#NAME#)(void);\n      PyObject* o = PyDict_GetItemString(d,"#name#");\n      PyObject_SetAttrString(o,"_cpointer", F2PyCapsule_FromVoidPtr((void*)#F_FUNC#(#name_lower#,#NAME#),NULL));\n#if PY_VERSION_HEX >= 0x03000000\n      PyObject_SetAttrString(o,"__name__", PyUnicode_FromString("#name#"));\n#else\n      PyObject_SetAttrString(o,"__name__", PyString_FromString("#name#"));\n#endif\n    }\n    '}, 
    'need': {l_not(l_or(ismoduleroutine, isdummyroutine)): ['F_WRAPPEDFUNC', 'F_FUNC']}, 'callfortranroutine': [{debugcapi: ['\tfprintf(stderr,"debug-capi:Fortran subroutine `f2pywrap#name_lower#(#callfortran#)\'\\n");']},
                         {hasexternals: '\tif (#setjmpbuf#) {\n\t\tf2py_success = 0;\n\t} else {'}, {isthreadsafe: '\tPy_BEGIN_ALLOW_THREADS'}, {l_not(l_or(hascallstatement, isdummyroutine)): '\t(*f2py_func)(#callfortran#);'}, {hascallstatement: '\t#callstatement#;\n\t/*(*f2py_func)(#callfortran#);*/'}, {isthreadsafe: '\tPy_END_ALLOW_THREADS'}, {hasexternals: '\t}'}], 
    '_check': issubroutine_wrap},
 {'functype': '#ctype#', 
    'docreturn': {l_not(isintent_hide): '#rname#,'}, 'docstrout': '\t#pydocsignout#', 
    'latexdocstrout': [
                     '\\item[]{{}\\verb@#pydocsignout#@{}}', {hasresultnote: '--- #resultnote#'}], 
    'callfortranroutine': [
                         {l_and(debugcapi, isstringfunction): '#ifdef USESCOMPAQFORTRAN\n\tfprintf(stderr,"debug-capi:Fortran function #ctype# #fortranname#(#callcompaqfortran#)\\n");\n#else\n\tfprintf(stderr,"debug-capi:Fortran function #ctype# #fortranname#(#callfortran#)\\n");\n#endif\n'},
                         {l_and(debugcapi, l_not(isstringfunction)): '\tfprintf(stderr,"debug-capi:Fortran function #ctype# #fortranname#(#callfortran#)\\n");\n'}], 
    '_check': l_and(isfunction, l_not(isfunction_wrap))},
 {'declfortranroutine': {l_and(l_not(l_or(ismoduleroutine, isintent_c)), l_not(isdummyroutine)): 'extern #ctype# #F_FUNC#(#fortranname#,#FORTRANNAME#)(#callprotoargument#);', l_and(l_not(ismoduleroutine), isintent_c, l_not(isdummyroutine)): 'extern #ctype# #fortranname#(#callprotoargument#);', 
                           isdummyroutine: ''}, 
    'routine_def': {l_and(l_not(l_or(ismoduleroutine, isintent_c)), l_not(isdummyroutine)): '\t{"#name#",-1,{{-1}},0,(char *)#F_FUNC#(#fortranname#,#FORTRANNAME#),(f2py_init_func)#apiname#,doc_#apiname#},', l_and(l_not(ismoduleroutine), isintent_c, l_not(isdummyroutine)): '\t{"#name#",-1,{{-1}},0,(char *)#fortranname#,(f2py_init_func)#apiname#,doc_#apiname#},', 
                    isdummyroutine: '\t{"#name#",-1,{{-1}},0,NULL,(f2py_init_func)#apiname#,doc_#apiname#},'}, 
    'decl': [
           {iscomplexfunction_warn: '\t#ctype# #name#_return_value={0,0};', l_not(iscomplexfunction): '\t#ctype# #name#_return_value=0;'}, {iscomplexfunction: '\tPyObject *#name#_return_value_capi = Py_None;'}], 
    'callfortranroutine': [
                         {hasexternals: '\tif (#setjmpbuf#) {\n\t\tf2py_success = 0;\n\t} else {'}, {isthreadsafe: '\tPy_BEGIN_ALLOW_THREADS'},
                         {hascallstatement: '\t#callstatement#;\n/*\t#name#_return_value = (*f2py_func)(#callfortran#);*/\n'}, {l_not(l_or(hascallstatement, isdummyroutine)): '\t#name#_return_value = (*f2py_func)(#callfortran#);'}, {isthreadsafe: '\tPy_END_ALLOW_THREADS'}, {hasexternals: '\t}'}, {l_and(debugcapi, iscomplexfunction): '\tfprintf(stderr,"#routdebugshowvalue#\\n",#name#_return_value.r,#name#_return_value.i);'}, {l_and(debugcapi, l_not(iscomplexfunction)): '\tfprintf(stderr,"#routdebugshowvalue#\\n",#name#_return_value);'}], 
    'pyobjfrom': {iscomplexfunction: '\t#name#_return_value_capi = pyobj_from_#ctype#1(#name#_return_value);'}, 'need': [{l_not(isdummyroutine): 'F_FUNC'}, {iscomplexfunction: 'pyobj_from_#ctype#1'}, {islong_longfunction: 'long_long'}, {islong_doublefunction: 'long_double'}], 'returnformat': {l_not(isintent_hide): '#rformat#'}, 'return': {iscomplexfunction: ',#name#_return_value_capi', l_not(l_or(iscomplexfunction, isintent_hide)): ',#name#_return_value'}, 
    '_check': l_and(isfunction, l_not(isstringfunction), l_not(isfunction_wrap))},
 {'declfortranroutine': 'extern void #F_FUNC#(#fortranname#,#FORTRANNAME#)(#callprotoargument#);', 
    'routine_def': {l_not(l_or(ismoduleroutine, isintent_c)): '\t{"#name#",-1,{{-1}},0,(char *)#F_FUNC#(#fortranname#,#FORTRANNAME#),(f2py_init_func)#apiname#,doc_#apiname#},', 
                    l_and(l_not(ismoduleroutine), isintent_c): '\t{"#name#",-1,{{-1}},0,(char *)#fortranname#,(f2py_init_func)#apiname#,doc_#apiname#},'}, 
    'decl': [
           '\t#ctype# #name#_return_value = NULL;',
           '\tint #name#_return_value_len = 0;'], 
    'callfortran': '#name#_return_value,#name#_return_value_len,', 
    'callfortranroutine': [
                         '\t#name#_return_value_len = #rlength#;',
                         '\tif ((#name#_return_value = (string)malloc(sizeof(char)*(#name#_return_value_len+1))) == NULL) {',
                         '\t\tPyErr_SetString(PyExc_MemoryError, "out of memory");',
                         '\t\tf2py_success = 0;',
                         '\t} else {',
                         "\t\t(#name#_return_value)[#name#_return_value_len] = '\\0';",
                         '\t}',
                         '\tif (f2py_success) {',
                         {hasexternals: '\t\tif (#setjmpbuf#) {\n\t\t\tf2py_success = 0;\n\t\t} else {'}, {isthreadsafe: '\t\tPy_BEGIN_ALLOW_THREADS'},
                         '#ifdef USESCOMPAQFORTRAN\n\t\t(*f2py_func)(#callcompaqfortran#);\n#else\n\t\t(*f2py_func)(#callfortran#);\n#endif\n', {isthreadsafe: '\t\tPy_END_ALLOW_THREADS'}, {hasexternals: '\t\t}'}, {debugcapi: '\t\tfprintf(stderr,"#routdebugshowvalue#\\n",#name#_return_value_len,#name#_return_value);'},
                         '\t} /* if (f2py_success) after (string)malloc */'], 
    'returnformat': '#rformat#', 
    'return': ',#name#_return_value', 
    'freemem': '\tSTRINGFREE(#name#_return_value);', 
    'need': [
           'F_FUNC', '#ctype#', 'STRINGFREE'], 
    '_check': l_and(isstringfunction, l_not(isfunction_wrap))},
 {'routdebugenter': '\tfprintf(stderr,"debug-capi:Python C/API function #modulename#.#name#(#docsignature#)\\n");', 
    'routdebugleave': '\tfprintf(stderr,"debug-capi:Python C/API function #modulename#.#name#: successful.\\n");', 
    'routdebugfailure': '\tfprintf(stderr,"debug-capi:Python C/API function #modulename#.#name#: failure.\\n");', 
    '_check': debugcapi}]
typedef_need_dict = {islong_long: 'long_long', islong_double: 'long_double', 
   islong_complex: 'complex_long_double', 
   isunsigned_char: 'unsigned_char', 
   isunsigned_short: 'unsigned_short', 
   isunsigned: 'unsigned', 
   isunsigned_long_long: 'unsigned_long_long', 
   isunsigned_chararray: 'unsigned_char', 
   isunsigned_shortarray: 'unsigned_short', 
   isunsigned_long_longarray: 'unsigned_long_long', 
   issigned_long_longarray: 'long_long'}
aux_rules = [
 {'separatorsfor': sepdict},
 {'frompyobj': [
                '\t/* Processing auxiliary variable #varname# */', {debugcapi: '\tfprintf(stderr,"#vardebuginfo#\\n");'}], 
    'cleanupfrompyobj': '\t/* End of cleaning variable #varname# */', 
    'need': typedef_need_dict},
 {'decl': '\t#ctype# #varname# = 0;', 
    'need': {hasinitvalue: 'math.h'}, 'frompyobj': {hasinitvalue: '\t#varname# = #init#;'}, '_check': l_and(isscalar, l_not(iscomplex))},
 {'return': ',#varname#', 
    'docstrout': '\t#pydocsignout#', 
    'docreturn': '#outvarname#,', 
    'returnformat': '#varrformat#', 
    '_check': l_and(isscalar, l_not(iscomplex), isintent_out)},
 {'decl': '\t#ctype# #varname#;', 
    'frompyobj': {hasinitvalue: '\t#varname#.r = #init.r#, #varname#.i = #init.i#;'}, '_check': iscomplex},
 {'decl': [
           '\t#ctype# #varname# = NULL;',
           '\tint slen(#varname#);'], 
    'need': [
           'len..'], 
    '_check': isstring},
 {'decl': [
           '\t#ctype# *#varname# = NULL;',
           '\tnpy_intp #varname#_Dims[#rank#] = {#rank*[-1]#};',
           '\tconst int #varname#_Rank = #rank#;'], 
    'need': [
           'len..', {hasinitvalue: 'forcomb'}, {hasinitvalue: 'CFUNCSMESS'}], 
    '_check': isarray},
 {'_check': l_and(isarray, l_not(iscomplexarray))},
 {'_check': l_and(isarray, l_not(iscomplexarray), isintent_nothide)},
 {'need': '#ctype#', '_check': isint1array, 
    '_depend': ''},
 {'need': '#ctype#', '_check': isunsigned_chararray, 
    '_depend': ''},
 {'need': '#ctype#', '_check': isunsigned_shortarray, 
    '_depend': ''},
 {'need': '#ctype#', '_check': isunsigned_long_longarray, 
    '_depend': ''},
 {'need': '#ctype#', '_check': iscomplexarray, 
    '_depend': ''},
 {'callfortranappend': {isarrayofstrings: 'flen(#varname#),'}, 'need': 'string', 
    '_check': isstringarray}]
arg_rules = [
 {'separatorsfor': sepdict},
 {'frompyobj': [
                '\t/* Processing variable #varname# */', {debugcapi: '\tfprintf(stderr,"#vardebuginfo#\\n");'}], 
    'cleanupfrompyobj': '\t/* End of cleaning variable #varname# */', 
    '_depend': '', 
    'need': typedef_need_dict},
 {'docstropt': {l_and(isoptional, isintent_nothide): '\t#pydocsign#'}, 'docstrreq': {l_and(isrequired, isintent_nothide): '\t#pydocsign#'}, 'docstrout': {isintent_out: '\t#pydocsignout#'}, 'latexdocstropt': {l_and(isoptional, isintent_nothide): ['\\item[]{{}\\verb@#pydocsign#@{}}', {hasnote: '--- #note#'}]}, 'latexdocstrreq': {l_and(isrequired, isintent_nothide): ['\\item[]{{}\\verb@#pydocsign#@{}}', {hasnote: '--- #note#'}]}, 'latexdocstrout': {isintent_out: ['\\item[]{{}\\verb@#pydocsignout#@{}}',
                                    {l_and(hasnote, isintent_hide): '--- #note#', l_and(hasnote, isintent_nothide): '--- See above.'}]}, 
    'depend': ''},
 {'kwlist': '"#varname#",', 
    'docsign': '#varname#,', 
    '_check': l_and(isintent_nothide, l_not(isoptional))},
 {'kwlistopt': '"#varname#",', 
    'docsignopt': '#varname#=#showinit#,', 
    'docsignoptshort': '#varname#,', 
    '_check': l_and(isintent_nothide, isoptional)},
 {'docreturn': '#outvarname#,', 
    'returnformat': '#varrformat#', 
    '_check': isintent_out},
 {'docsignxa': {isintent_nothide: '#varname#_extra_args=(),'}, 'docsignxashort': {isintent_nothide: '#varname#_extra_args,'}, 'docstropt': {isintent_nothide: '\t#varname#_extra_args := () input tuple'}, 'docstrcbs': '#cbdocstr#', 
    'latexdocstrcbs': '\\item[] #cblatexdocstr#', 
    'latexdocstropt': {isintent_nothide: '\\item[]{{}\\verb@#varname#_extra_args := () input tuple@{}} --- Extra arguments for call-back function {{}\\verb@#varname#@{}}.'}, 'decl': [
           '\tPyObject *#varname#_capi = Py_None;',
           '\tPyTupleObject *#varname#_xa_capi = NULL;',
           '\tPyTupleObject *#varname#_args_capi = NULL;',
           '\tint #varname#_nofargs_capi = 0;', {l_not(isintent_callback): '\t#cbname#_typedef #varname#_cptr;'}], 
    'kwlistxa': {isintent_nothide: '"#varname#_extra_args",'}, 'argformat': {isrequired: 'O'}, 'keyformat': {isoptional: 'O'}, 'xaformat': {isintent_nothide: 'O!'}, 'args_capi': {isrequired: ',&#varname#_capi'}, 'keys_capi': {isoptional: ',&#varname#_capi'}, 'keys_xa': ',&PyTuple_Type,&#varname#_xa_capi', 
    'setjmpbuf': '(setjmp(#cbname#_jmpbuf))', 
    'callfortran': {l_not(isintent_callback): '#varname#_cptr,'}, 'need': [
           '#cbname#', 'setjmp.h'], 
    '_check': isexternal},
 {'frompyobj': [
                {l_not(isintent_callback): 'if(F2PyCapsule_Check(#varname#_capi)) {\n  #varname#_cptr = F2PyCapsule_AsVoidPtr(#varname#_capi);\n} else {\n  #varname#_cptr = #cbname#;\n}\n'},
                {isintent_callback: 'if (#varname#_capi==Py_None) {\n  #varname#_capi = PyObject_GetAttrString(#modulename#_module,"#varname#");\n  if (#varname#_capi) {\n    if (#varname#_xa_capi==NULL) {\n      if (PyObject_HasAttrString(#modulename#_module,"#varname#_extra_args")) {\n        PyObject* capi_tmp = PyObject_GetAttrString(#modulename#_module,"#varname#_extra_args");\n        if (capi_tmp)\n          #varname#_xa_capi = (PyTupleObject *)PySequence_Tuple(capi_tmp);\n        else\n          #varname#_xa_capi = (PyTupleObject *)Py_BuildValue("()");\n        if (#varname#_xa_capi==NULL) {\n          PyErr_SetString(#modulename#_error,"Failed to convert #modulename#.#varname#_extra_args to tuple.\\n");\n          return NULL;\n        }\n      }\n    }\n  }\n  if (#varname#_capi==NULL) {\n    PyErr_SetString(#modulename#_error,"Callback #varname# not defined (as an argument or module #modulename# attribute).\\n");\n    return NULL;\n  }\n}\n'},
                '\t#varname#_nofargs_capi = #cbname#_nofargs;\n\tif (create_cb_arglist(#varname#_capi,#varname#_xa_capi,#maxnofargs#,#nofoptargs#,&#cbname#_nofargs,&#varname#_args_capi,"failed in processing argument list for call-back #varname#.")) {\n\t\tjmp_buf #varname#_jmpbuf;',
                {debugcapi: [
                             '\t\tfprintf(stderr,"debug-capi:Assuming %d arguments; at most #maxnofargs#(-#nofoptargs#) is expected.\\n",#cbname#_nofargs);\n\t\tCFUNCSMESSPY("for #varname#=",#cbname#_capi);', {l_not(isintent_callback): '\t\tfprintf(stderr,"#vardebugshowvalue# (call-back in C).\\n",#cbname#);'}]},
                '\t\tCFUNCSMESS("Saving jmpbuf for `#varname#`.\\n");\n\t\tSWAP(#varname#_capi,#cbname#_capi,PyObject);\n\t\tSWAP(#varname#_args_capi,#cbname#_args_capi,PyTupleObject);\n\t\tmemcpy(&#varname#_jmpbuf,&#cbname#_jmpbuf,sizeof(jmp_buf));'], 
    'cleanupfrompyobj': '\t\tCFUNCSMESS("Restoring jmpbuf for `#varname#`.\\n");\n\t\t#cbname#_capi = #varname#_capi;\n\t\tPy_DECREF(#cbname#_args_capi);\n\t\t#cbname#_args_capi = #varname#_args_capi;\n\t\t#cbname#_nofargs = #varname#_nofargs_capi;\n\t\tmemcpy(&#cbname#_jmpbuf,&#varname#_jmpbuf,sizeof(jmp_buf));\n\t}', 
    'need': [
           'SWAP', 'create_cb_arglist'], 
    '_check': isexternal, 
    '_depend': ''},
 {'decl': '\t#ctype# #varname# = 0;', 
    'pyobjfrom': {debugcapi: '\tfprintf(stderr,"#vardebugshowvalue#\\n",#varname#);'}, 'callfortran': {isintent_c: '#varname#,', l_not(isintent_c): '&#varname#,'}, 'return': {isintent_out: ',#varname#'}, '_check': l_and(isscalar, l_not(iscomplex))},
 {'need': {hasinitvalue: 'math.h'}, '_check': l_and(isscalar, l_not(iscomplex))},
 {'decl': '\tPyObject *#varname#_capi = Py_None;', 
    'argformat': {isrequired: 'O'}, 'keyformat': {isoptional: 'O'}, 'args_capi': {isrequired: ',&#varname#_capi'}, 'keys_capi': {isoptional: ',&#varname#_capi'}, 'pyobjfrom': {isintent_inout: '\tf2py_success = try_pyarr_from_#ctype#(#varname#_capi,&#varname#);\n\tif (f2py_success) {'}, 
    'closepyobjfrom': {isintent_inout: '\t} /*if (f2py_success) of #varname# pyobjfrom*/'}, 'need': {isintent_inout: 'try_pyarr_from_#ctype#'}, '_check': l_and(isscalar, l_not(iscomplex), isintent_nothide)},
 {'frompyobj': [
                {hasinitvalue: '\tif (#varname#_capi == Py_None) #varname# = #init#; else', '_depend': ''},
                {l_and(isoptional, l_not(hasinitvalue)): '\tif (#varname#_capi != Py_None)', '_depend': ''},
                {l_not(islogical): '\t\tf2py_success = #ctype#_from_pyobj(&#varname#,#varname#_capi,"#pyname#() #nth# (#varname#) can\'t be converted to #ctype#");\n\tif (f2py_success) {'},
                {islogical: '\t\t#varname# = (#ctype#)PyObject_IsTrue(#varname#_capi);\n\t\tf2py_success = 1;\n\tif (f2py_success) {'}], 
    'cleanupfrompyobj': '\t} /*if (f2py_success) of #varname#*/', 
    'need': {l_not(islogical): '#ctype#_from_pyobj'}, '_check': l_and(isscalar, l_not(iscomplex), isintent_nothide), 
    '_depend': ''},
 {'frompyobj': {hasinitvalue: '\t#varname# = #init#;'}, 'need': typedef_need_dict, 
    '_check': l_and(isscalar, l_not(iscomplex), isintent_hide), 
    '_depend': ''},
 {'frompyobj': {debugcapi: '\tfprintf(stderr,"#vardebugshowvalue#\\n",#varname#);'}, '_check': l_and(isscalar, l_not(iscomplex)), 
    '_depend': ''},
 {'decl': '\t#ctype# #varname#;', 
    'callfortran': {isintent_c: '#varname#,', l_not(isintent_c): '&#varname#,'}, 'pyobjfrom': {debugcapi: '\tfprintf(stderr,"#vardebugshowvalue#\\n",#varname#.r,#varname#.i);'}, 'return': {isintent_out: ',#varname#_capi'}, '_check': iscomplex},
 {'decl': '\tPyObject *#varname#_capi = Py_None;', 
    'argformat': {isrequired: 'O'}, 'keyformat': {isoptional: 'O'}, 'args_capi': {isrequired: ',&#varname#_capi'}, 'keys_capi': {isoptional: ',&#varname#_capi'}, 'need': {isintent_inout: 'try_pyarr_from_#ctype#'}, 'pyobjfrom': {isintent_inout: '\t\tf2py_success = try_pyarr_from_#ctype#(#varname#_capi,&#varname#);\n\t\tif (f2py_success) {'}, 
    'closepyobjfrom': {isintent_inout: '\t\t} /*if (f2py_success) of #varname# pyobjfrom*/'}, '_check': l_and(iscomplex, isintent_nothide)},
 {'frompyobj': [{hasinitvalue: '\tif (#varname#_capi==Py_None) {#varname#.r = #init.r#, #varname#.i = #init.i#;} else'}, {l_and(isoptional, l_not(hasinitvalue)): '\tif (#varname#_capi != Py_None)'},
                '\t\tf2py_success = #ctype#_from_pyobj(&#varname#,#varname#_capi,"#pyname#() #nth# (#varname#) can\'t be converted to #ctype#");\n\tif (f2py_success) {'], 
    'cleanupfrompyobj': '\t}  /*if (f2py_success) of #varname# frompyobj*/', 
    'need': [
           '#ctype#_from_pyobj'], 
    '_check': l_and(iscomplex, isintent_nothide), 
    '_depend': ''},
 {'decl': {isintent_out: '\tPyObject *#varname#_capi = Py_None;'}, '_check': l_and(iscomplex, isintent_hide)},
 {'frompyobj': {hasinitvalue: '\t#varname#.r = #init.r#, #varname#.i = #init.i#;'}, '_check': l_and(iscomplex, isintent_hide), 
    '_depend': ''},
 {'pyobjfrom': {isintent_out: '\t#varname#_capi = pyobj_from_#ctype#1(#varname#);'}, 'need': [
           'pyobj_from_#ctype#1'], 
    '_check': iscomplex},
 {'frompyobj': {debugcapi: '\tfprintf(stderr,"#vardebugshowvalue#\\n",#varname#.r,#varname#.i);'}, '_check': iscomplex, 
    '_depend': ''},
 {'decl': [
           '\t#ctype# #varname# = NULL;',
           '\tint slen(#varname#);',
           '\tPyObject *#varname#_capi = Py_None;'], 
    'callfortran': '#varname#,', 
    'callfortranappend': 'slen(#varname#),', 
    'pyobjfrom': {debugcapi: '\tfprintf(stderr,"#vardebugshowvalue#\\n",slen(#varname#),#varname#);'}, 'return': {isintent_out: ',#varname#'}, 'need': [
           'len..'], 
    '_check': isstring},
 {'frompyobj': '\tslen(#varname#) = #length#;\n\tf2py_success = #ctype#_from_pyobj(&#varname#,&slen(#varname#),#init#,#varname#_capi,"#ctype#_from_pyobj failed in converting #nth# `#varname#\' of #pyname# to C #ctype#");\n\tif (f2py_success) {', 
    'cleanupfrompyobj': '\t\tSTRINGFREE(#varname#);\n\t}  /*if (f2py_success) of #varname#*/', 
    'need': [
           '#ctype#_from_pyobj', 'len..', 'STRINGFREE'], 
    '_check': isstring, 
    '_depend': ''},
 {'argformat': {isrequired: 'O'}, 'keyformat': {isoptional: 'O'}, 'args_capi': {isrequired: ',&#varname#_capi'}, 'keys_capi': {isoptional: ',&#varname#_capi'}, 'pyobjfrom': {isintent_inout: '\tf2py_success = try_pyarr_from_#ctype#(#varname#_capi,#varname#);\n\tif (f2py_success) {'}, 
    'closepyobjfrom': {isintent_inout: '\t} /*if (f2py_success) of #varname# pyobjfrom*/'}, 'need': {isintent_inout: 'try_pyarr_from_#ctype#'}, '_check': l_and(isstring, isintent_nothide)},
 {'_check': l_and(isstring, isintent_hide)},
 {'frompyobj': {debugcapi: '\tfprintf(stderr,"#vardebugshowvalue#\\n",slen(#varname#),#varname#);'}, '_check': isstring, 
    '_depend': ''},
 {'decl': [
           '\t#ctype# *#varname# = NULL;', 
           '\tnpy_intp #varname#_Dims[#rank#] = {#rank*[-1]#};', 
           '\tconst int #varname#_Rank = #rank#;', 
           '\tPyArrayObject *capi_#varname#_tmp = NULL;', 
           '\tint capi_#varname#_intent = 0;'], 
    'callfortran': '#varname#,', 
    'return': {isintent_out: ',capi_#varname#_tmp'}, 'need': 'len..', 
    '_check': isarray},
 {'decl': '\tint capi_overwrite_#varname# = 1;', 
    'kwlistxa': '"overwrite_#varname#",', 
    'xaformat': 'i', 
    'keys_xa': ',&capi_overwrite_#varname#', 
    'docsignxa': 'overwrite_#varname#=1,', 
    'docsignxashort': 'overwrite_#varname#,', 
    'docstropt': '\toverwrite_#varname# := 1 input int', 
    '_check': l_and(isarray, isintent_overwrite)},
 {'frompyobj': '\tcapi_#varname#_intent |= (capi_overwrite_#varname#?0:F2PY_INTENT_COPY);', 
    '_check': l_and(isarray, isintent_overwrite), 
    '_depend': ''},
 {'decl': '\tint capi_overwrite_#varname# = 0;', 
    'kwlistxa': '"overwrite_#varname#",', 
    'xaformat': 'i', 
    'keys_xa': ',&capi_overwrite_#varname#', 
    'docsignxa': 'overwrite_#varname#=0,', 
    'docsignxashort': 'overwrite_#varname#,', 
    'docstropt': '\toverwrite_#varname# := 0 input int', 
    '_check': l_and(isarray, isintent_copy)},
 {'frompyobj': '\tcapi_#varname#_intent |= (capi_overwrite_#varname#?0:F2PY_INTENT_COPY);', 
    '_check': l_and(isarray, isintent_copy), 
    '_depend': ''},
 {'need': [{hasinitvalue: 'forcomb'}, {hasinitvalue: 'CFUNCSMESS'}], '_check': isarray, 
    '_depend': ''},
 {'decl': '\tPyObject *#varname#_capi = Py_None;', 
    'argformat': {isrequired: 'O'}, 'keyformat': {isoptional: 'O'}, 'args_capi': {isrequired: ',&#varname#_capi'}, 'keys_capi': {isoptional: ',&#varname#_capi'}, '_check': l_and(isarray, isintent_nothide)},
 {'frompyobj': [
                '\t#setdims#;',
                '\tcapi_#varname#_intent |= #intent#;', {isintent_hide: '\tcapi_#varname#_tmp = array_from_pyobj(#atype#,#varname#_Dims,#varname#_Rank,capi_#varname#_intent,Py_None);'}, {isintent_nothide: '\tcapi_#varname#_tmp = array_from_pyobj(#atype#,#varname#_Dims,#varname#_Rank,capi_#varname#_intent,#varname#_capi);'},
                '\tif (capi_#varname#_tmp == NULL) {\n\t\tif (!PyErr_Occurred())\n\t\t\tPyErr_SetString(#modulename#_error,"failed in converting #nth# `#varname#\' of #pyname# to C/Fortran array" );\n\t} else {\n\t\t#varname# = (#ctype# *)(capi_#varname#_tmp->data);\n',
                {hasinitvalue: [{isintent_nothide: '\tif (#varname#_capi == Py_None) {'}, {isintent_hide: '\t{'}, {iscomplexarray: '\t\t#ctype# capi_c;'},
                                '\t\tint *_i,capi_i=0;\n\t\tCFUNCSMESS("#name#: Initializing #varname#=#init#\\n");\n\t\tif (initforcomb(capi_#varname#_tmp->dimensions,capi_#varname#_tmp->nd,1)) {\n\t\t\twhile ((_i = nextforcomb()))\n\t\t\t\t#varname#[capi_i++] = #init#; /* fortran way */\n\t\t} else {\n\t\t\tif (!PyErr_Occurred())\n\t\t\t\tPyErr_SetString(#modulename#_error,"Initialization of #nth# #varname# failed (initforcomb).");\n\t\t\tf2py_success = 0;\n\t\t}\n\t}\n\tif (f2py_success) {']}], 
    'cleanupfrompyobj': [
                       '\t}  /*if (capi_#varname#_tmp == NULL) ... else of #varname#*/',
                       {l_not(l_or(isintent_out, isintent_hide)): '\tif((PyObject *)capi_#varname#_tmp!=#varname#_capi) {\n\t\tPy_XDECREF(capi_#varname#_tmp); }'}, {l_and(isintent_hide, l_not(isintent_out)): '\t\tPy_XDECREF(capi_#varname#_tmp);'}, {hasinitvalue: '\t}  /*if (f2py_success) of #varname# init*/'}], 
    '_check': isarray, 
    '_depend': ''},
 {'_check': l_and(isarray, l_not(iscomplexarray))},
 {'_check': l_and(isarray, l_not(iscomplexarray), isintent_nothide)},
 {'need': '#ctype#', '_check': isint1array, 
    '_depend': ''},
 {'need': '#ctype#', '_check': isunsigned_chararray, 
    '_depend': ''},
 {'need': '#ctype#', '_check': isunsigned_shortarray, 
    '_depend': ''},
 {'need': '#ctype#', '_check': isunsigned_long_longarray, 
    '_depend': ''},
 {'need': '#ctype#', '_check': iscomplexarray, 
    '_depend': ''},
 {'callfortranappend': {isarrayofstrings: 'flen(#varname#),'}, 'need': 'string', 
    '_check': isstringarray}]
check_rules = [
 {'frompyobj': {debugcapi: '\tfprintf(stderr,"debug-capi:Checking `#check#\'\\n");'}, 'need': 'len..'},
 {'frompyobj': '\tCHECKSCALAR(#check#,"#check#","#nth# #varname#","#varshowvalue#",#varname#) {', 
    'cleanupfrompyobj': '\t} /*CHECKSCALAR(#check#)*/', 
    'need': 'CHECKSCALAR', 
    '_check': l_and(isscalar, l_not(iscomplex)), 
    '_break': ''},
 {'frompyobj': '\tCHECKSTRING(#check#,"#check#","#nth# #varname#","#varshowvalue#",#varname#) {', 
    'cleanupfrompyobj': '\t} /*CHECKSTRING(#check#)*/', 
    'need': 'CHECKSTRING', 
    '_check': isstring, 
    '_break': ''},
 {'need': 'CHECKARRAY', 
    'frompyobj': '\tCHECKARRAY(#check#,"#check#","#nth# #varname#") {', 
    'cleanupfrompyobj': '\t} /*CHECKARRAY(#check#)*/', 
    '_check': isarray, 
    '_break': ''},
 {'need': 'CHECKGENERIC', 
    'frompyobj': '\tCHECKGENERIC(#check#,"#check#","#nth# #varname#") {', 
    'cleanupfrompyobj': '\t} /*CHECKGENERIC(#check#)*/'}]

def buildmodule--- This code section failed: ---

 L.1163         0  LOAD_GLOBAL           0  'outmess'
                3  LOAD_CONST               '\tBuilding module "%s"...\n'
                6  LOAD_FAST             0  'm'
                9  LOAD_CONST               'name'
               12  BINARY_SUBSCR    
               13  BINARY_MODULO    
               14  CALL_FUNCTION_1       1  None
               17  POP_TOP          

 L.1164        18  BUILD_MAP_0           0  None
               21  STORE_FAST            2  'ret'

 L.1165        24  LOAD_GLOBAL           1  'defmod_rules'
               27  SLICE+0          
               28  STORE_FAST            3  'mod_rules'

 L.1166        31  LOAD_GLOBAL           2  'modsign2map'
               34  LOAD_FAST             0  'm'
               37  CALL_FUNCTION_1       1  None
               40  STORE_FAST            4  'vrd'

 L.1167        43  LOAD_GLOBAL           3  'dictappend'
               46  BUILD_MAP_1           1  None
               49  LOAD_GLOBAL           4  'f2py_version'
               52  LOAD_CONST               'f2py_version'
               55  STORE_MAP        
               56  LOAD_FAST             4  'vrd'
               59  CALL_FUNCTION_2       2  None
               62  STORE_FAST            5  'rd'

 L.1168        65  BUILD_LIST_0          0 
               68  STORE_FAST            6  'funcwrappers'

 L.1169        71  BUILD_LIST_0          0 
               74  STORE_FAST            7  'funcwrappers2'

 L.1170        77  SETUP_LOOP          377  'to 457'
               80  LOAD_FAST             0  'm'
               83  LOAD_CONST               'interfaced'
               86  BINARY_SUBSCR    
               87  GET_ITER         
               88  FOR_ITER            365  'to 456'
               91  STORE_FAST            8  'n'

 L.1171        94  LOAD_CONST               None
               97  STORE_FAST            9  'nb'

 L.1172       100  SETUP_LOOP           97  'to 200'
              103  LOAD_FAST             0  'm'
              106  LOAD_CONST               'body'
              109  BINARY_SUBSCR    
              110  GET_ITER         
              111  FOR_ITER             85  'to 199'
              114  STORE_FAST           10  'bi'

 L.1173       117  LOAD_FAST            10  'bi'
              120  LOAD_CONST               'block'
              123  BINARY_SUBSCR    
              124  LOAD_CONST               'interface'
              127  COMPARE_OP            2  ==
              130  POP_JUMP_IF_TRUE    149  'to 149'

 L.1174       133  LOAD_GLOBAL           6  'errmess'
              136  LOAD_CONST               'buildmodule: Expected interface block. Skipping.\n'
              139  CALL_FUNCTION_1       1  None
              142  POP_TOP          

 L.1175       143  CONTINUE            111  'to 111'
              146  JUMP_FORWARD          0  'to 149'
            149_0  COME_FROM           146  '146'

 L.1176       149  SETUP_LOOP           44  'to 196'
              152  LOAD_FAST            10  'bi'
              155  LOAD_CONST               'body'
              158  BINARY_SUBSCR    
              159  GET_ITER         
              160  FOR_ITER             32  'to 195'
              163  STORE_FAST           11  'b'

 L.1177       166  LOAD_FAST            11  'b'
              169  LOAD_CONST               'name'
              172  BINARY_SUBSCR    
              173  LOAD_FAST             8  'n'
              176  COMPARE_OP            2  ==
              179  POP_JUMP_IF_FALSE   160  'to 160'
              182  LOAD_FAST            11  'b'
              185  STORE_FAST            9  'nb'
              188  BREAK_LOOP       
              189  JUMP_BACK           160  'to 160'
              192  JUMP_BACK           160  'to 160'
              195  POP_BLOCK        
            196_0  COME_FROM           149  '149'
              196  JUMP_BACK           111  'to 111'
              199  POP_BLOCK        
            200_0  COME_FROM           100  '100'

 L.1179       200  LOAD_FAST             9  'nb'
              203  POP_JUMP_IF_TRUE    226  'to 226'

 L.1180       206  LOAD_GLOBAL           6  'errmess'
              209  LOAD_CONST               'buildmodule: Could not found the body of interfaced routine "%s". Skipping.\n'
              212  LOAD_FAST             8  'n'
              215  BINARY_MODULO    
              216  CALL_FUNCTION_1       1  None
              219  POP_TOP          

 L.1181       220  CONTINUE             88  'to 88'
              223  JUMP_FORWARD          0  'to 226'
            226_0  COME_FROM           223  '223'

 L.1182       226  LOAD_FAST             9  'nb'
              229  BUILD_LIST_1          1 
              232  STORE_FAST           12  'nb_list'

 L.1183       235  LOAD_CONST               'entry'
              238  LOAD_FAST             9  'nb'
              241  COMPARE_OP            6  in
              244  POP_JUMP_IF_FALSE   338  'to 338'

 L.1184       247  SETUP_LOOP           88  'to 338'
              250  LOAD_FAST             9  'nb'
              253  LOAD_CONST               'entry'
              256  BINARY_SUBSCR    
              257  LOAD_ATTR             7  'items'
              260  CALL_FUNCTION_0       0  None
              263  GET_ITER         
              264  FOR_ITER             67  'to 334'
              267  UNPACK_SEQUENCE_2     2 
              270  STORE_FAST           13  'k'
              273  STORE_FAST           14  'a'

 L.1185       276  LOAD_GLOBAL           8  'copy'
              279  LOAD_ATTR             9  'deepcopy'
              282  LOAD_FAST             9  'nb'
              285  CALL_FUNCTION_1       1  None
              288  STORE_FAST           15  'nb1'

 L.1186       291  LOAD_FAST            15  'nb1'
              294  LOAD_CONST               'entry'
              297  DELETE_SUBSCR    

 L.1187       298  LOAD_FAST            13  'k'
              301  LOAD_FAST            15  'nb1'
              304  LOAD_CONST               'name'
              307  STORE_SUBSCR     

 L.1188       308  LOAD_FAST            14  'a'
              311  LOAD_FAST            15  'nb1'
              314  LOAD_CONST               'args'
              317  STORE_SUBSCR     

 L.1189       318  LOAD_FAST            12  'nb_list'
              321  LOAD_ATTR            10  'append'
              324  LOAD_FAST            15  'nb1'
              327  CALL_FUNCTION_1       1  None
              330  POP_TOP          
              331  JUMP_BACK           264  'to 264'
              334  POP_BLOCK        
            335_0  COME_FROM           247  '247'
              335  JUMP_FORWARD          0  'to 338'
            338_0  COME_FROM           247  '247'

 L.1190       338  SETUP_LOOP          112  'to 453'
              341  LOAD_FAST            12  'nb_list'
              344  GET_ITER         
              345  FOR_ITER            104  'to 452'
              348  STORE_FAST            9  'nb'

 L.1191       351  LOAD_GLOBAL          11  'buildapi'
              354  LOAD_FAST             9  'nb'
              357  CALL_FUNCTION_1       1  None
              360  UNPACK_SEQUENCE_2     2 
              363  STORE_FAST           16  'api'
              366  STORE_FAST           17  'wrap'

 L.1192       369  LOAD_FAST            17  'wrap'
              372  POP_JUMP_IF_FALSE   419  'to 419'

 L.1193       375  LOAD_GLOBAL          12  'ismoduleroutine'
              378  LOAD_FAST             9  'nb'
              381  CALL_FUNCTION_1       1  None
              384  POP_JUMP_IF_FALSE   403  'to 403'

 L.1194       387  LOAD_FAST             7  'funcwrappers2'
              390  LOAD_ATTR            10  'append'
              393  LOAD_FAST            17  'wrap'
              396  CALL_FUNCTION_1       1  None
              399  POP_TOP          
              400  JUMP_ABSOLUTE       419  'to 419'

 L.1196       403  LOAD_FAST             6  'funcwrappers'
              406  LOAD_ATTR            10  'append'
              409  LOAD_FAST            17  'wrap'
              412  CALL_FUNCTION_1       1  None
              415  POP_TOP          
              416  JUMP_FORWARD          0  'to 419'
            419_0  COME_FROM           416  '416'

 L.1197       419  LOAD_GLOBAL          13  'applyrules'
              422  LOAD_FAST            16  'api'
              425  LOAD_FAST             4  'vrd'
              428  CALL_FUNCTION_2       2  None
              431  STORE_FAST           18  'ar'

 L.1198       434  LOAD_GLOBAL           3  'dictappend'
              437  LOAD_FAST             5  'rd'
              440  LOAD_FAST            18  'ar'
              443  CALL_FUNCTION_2       2  None
              446  STORE_FAST            5  'rd'
              449  JUMP_BACK           345  'to 345'
              452  POP_BLOCK        
            453_0  COME_FROM           338  '338'
              453  JUMP_BACK            88  'to 88'
              456  POP_BLOCK        
            457_0  COME_FROM            77  '77'

 L.1201       457  LOAD_GLOBAL          14  'common_rules'
              460  LOAD_ATTR            15  'buildhooks'
              463  LOAD_FAST             0  'm'
              466  CALL_FUNCTION_1       1  None
              469  UNPACK_SEQUENCE_2     2 
              472  STORE_FAST           19  'cr'
              475  STORE_FAST           17  'wrap'

 L.1202       478  LOAD_FAST            17  'wrap'
              481  POP_JUMP_IF_FALSE   500  'to 500'

 L.1203       484  LOAD_FAST             6  'funcwrappers'
              487  LOAD_ATTR            10  'append'
              490  LOAD_FAST            17  'wrap'
              493  CALL_FUNCTION_1       1  None
              496  POP_TOP          
              497  JUMP_FORWARD          0  'to 500'
            500_0  COME_FROM           497  '497'

 L.1204       500  LOAD_GLOBAL          13  'applyrules'
              503  LOAD_FAST            19  'cr'
              506  LOAD_FAST             4  'vrd'
              509  CALL_FUNCTION_2       2  None
              512  STORE_FAST           18  'ar'

 L.1205       515  LOAD_GLOBAL           3  'dictappend'
              518  LOAD_FAST             5  'rd'
              521  LOAD_FAST            18  'ar'
              524  CALL_FUNCTION_2       2  None
              527  STORE_FAST            5  'rd'

 L.1208       530  LOAD_GLOBAL          16  'f90mod_rules'
              533  LOAD_ATTR            15  'buildhooks'
              536  LOAD_FAST             0  'm'
              539  CALL_FUNCTION_1       1  None
              542  UNPACK_SEQUENCE_2     2 
              545  STORE_FAST           20  'mr'
              548  STORE_FAST           17  'wrap'

 L.1209       551  LOAD_FAST            17  'wrap'
              554  POP_JUMP_IF_FALSE   573  'to 573'

 L.1210       557  LOAD_FAST             7  'funcwrappers2'
              560  LOAD_ATTR            10  'append'
              563  LOAD_FAST            17  'wrap'
              566  CALL_FUNCTION_1       1  None
              569  POP_TOP          
              570  JUMP_FORWARD          0  'to 573'
            573_0  COME_FROM           570  '570'

 L.1211       573  LOAD_GLOBAL          13  'applyrules'
              576  LOAD_FAST            20  'mr'
              579  LOAD_FAST             4  'vrd'
              582  CALL_FUNCTION_2       2  None
              585  STORE_FAST           18  'ar'

 L.1212       588  LOAD_GLOBAL           3  'dictappend'
              591  LOAD_FAST             5  'rd'
              594  LOAD_FAST            18  'ar'
              597  CALL_FUNCTION_2       2  None
              600  STORE_FAST            5  'rd'

 L.1214       603  SETUP_LOOP           59  'to 665'
              606  LOAD_FAST             1  'um'
              609  GET_ITER         
              610  FOR_ITER             51  'to 664'
              613  STORE_FAST           21  'u'

 L.1215       616  LOAD_GLOBAL          17  'use_rules'
              619  LOAD_ATTR            18  'buildusevars'
              622  LOAD_FAST            21  'u'
              625  LOAD_FAST             0  'm'
              628  LOAD_CONST               'use'
              631  BINARY_SUBSCR    
              632  LOAD_FAST            21  'u'
              635  LOAD_CONST               'name'
              638  BINARY_SUBSCR    
              639  BINARY_SUBSCR    
              640  CALL_FUNCTION_2       2  None
              643  STORE_FAST           18  'ar'

 L.1216       646  LOAD_GLOBAL           3  'dictappend'
              649  LOAD_FAST             5  'rd'
              652  LOAD_FAST            18  'ar'
              655  CALL_FUNCTION_2       2  None
              658  STORE_FAST            5  'rd'
              661  JUMP_BACK           610  'to 610'
              664  POP_BLOCK        
            665_0  COME_FROM           603  '603'

 L.1218       665  LOAD_GLOBAL          19  'cfuncs'
              668  LOAD_ATTR            20  'get_needs'
              671  CALL_FUNCTION_0       0  None
              674  STORE_FAST           22  'needs'

 L.1219       677  BUILD_MAP_0           0  None
              680  STORE_FAST           23  'code'

 L.1220       683  SETUP_LOOP          402  'to 1088'
              686  LOAD_FAST            22  'needs'
              689  LOAD_ATTR            21  'keys'
              692  CALL_FUNCTION_0       0  None
              695  GET_ITER         
              696  FOR_ITER            388  'to 1087'
              699  STORE_FAST            8  'n'

 L.1221       702  BUILD_LIST_0          0 
              705  LOAD_FAST            23  'code'
              708  LOAD_FAST             8  'n'
              711  STORE_SUBSCR     

 L.1222       712  SETUP_LOOP          369  'to 1084'
              715  LOAD_FAST            22  'needs'
              718  LOAD_FAST             8  'n'
              721  BINARY_SUBSCR    
              722  GET_ITER         
              723  FOR_ITER            357  'to 1083'
              726  STORE_FAST           13  'k'

 L.1223       729  LOAD_CONST               ''
              732  STORE_FAST           24  'c'

 L.1224       735  LOAD_FAST            13  'k'
              738  LOAD_GLOBAL          19  'cfuncs'
              741  LOAD_ATTR            22  'includes0'
              744  COMPARE_OP            6  in
              747  POP_JUMP_IF_FALSE   766  'to 766'

 L.1225       750  LOAD_GLOBAL          19  'cfuncs'
              753  LOAD_ATTR            22  'includes0'
              756  LOAD_FAST            13  'k'
              759  BINARY_SUBSCR    
              760  STORE_FAST           24  'c'
              763  JUMP_FORWARD        297  'to 1063'

 L.1226       766  LOAD_FAST            13  'k'
              769  LOAD_GLOBAL          19  'cfuncs'
              772  LOAD_ATTR            23  'includes'
              775  COMPARE_OP            6  in
              778  POP_JUMP_IF_FALSE   797  'to 797'

 L.1227       781  LOAD_GLOBAL          19  'cfuncs'
              784  LOAD_ATTR            23  'includes'
              787  LOAD_FAST            13  'k'
              790  BINARY_SUBSCR    
              791  STORE_FAST           24  'c'
              794  JUMP_FORWARD        266  'to 1063'

 L.1228       797  LOAD_FAST            13  'k'
              800  LOAD_GLOBAL          19  'cfuncs'
              803  LOAD_ATTR            24  'userincludes'
              806  COMPARE_OP            6  in
              809  POP_JUMP_IF_FALSE   828  'to 828'

 L.1229       812  LOAD_GLOBAL          19  'cfuncs'
              815  LOAD_ATTR            24  'userincludes'
              818  LOAD_FAST            13  'k'
              821  BINARY_SUBSCR    
              822  STORE_FAST           24  'c'
              825  JUMP_FORWARD        235  'to 1063'

 L.1230       828  LOAD_FAST            13  'k'
              831  LOAD_GLOBAL          19  'cfuncs'
              834  LOAD_ATTR            25  'typedefs'
              837  COMPARE_OP            6  in
              840  POP_JUMP_IF_FALSE   859  'to 859'

 L.1231       843  LOAD_GLOBAL          19  'cfuncs'
              846  LOAD_ATTR            25  'typedefs'
              849  LOAD_FAST            13  'k'
              852  BINARY_SUBSCR    
              853  STORE_FAST           24  'c'
              856  JUMP_FORWARD        204  'to 1063'

 L.1232       859  LOAD_FAST            13  'k'
              862  LOAD_GLOBAL          19  'cfuncs'
              865  LOAD_ATTR            26  'typedefs_generated'
              868  COMPARE_OP            6  in
              871  POP_JUMP_IF_FALSE   890  'to 890'

 L.1233       874  LOAD_GLOBAL          19  'cfuncs'
              877  LOAD_ATTR            26  'typedefs_generated'
              880  LOAD_FAST            13  'k'
              883  BINARY_SUBSCR    
              884  STORE_FAST           24  'c'
              887  JUMP_FORWARD        173  'to 1063'

 L.1234       890  LOAD_FAST            13  'k'
              893  LOAD_GLOBAL          19  'cfuncs'
              896  LOAD_ATTR            27  'cppmacros'
              899  COMPARE_OP            6  in
              902  POP_JUMP_IF_FALSE   921  'to 921'

 L.1235       905  LOAD_GLOBAL          19  'cfuncs'
              908  LOAD_ATTR            27  'cppmacros'
              911  LOAD_FAST            13  'k'
              914  BINARY_SUBSCR    
              915  STORE_FAST           24  'c'
              918  JUMP_FORWARD        142  'to 1063'

 L.1236       921  LOAD_FAST            13  'k'
              924  LOAD_GLOBAL          19  'cfuncs'
              927  LOAD_ATTR            19  'cfuncs'
              930  COMPARE_OP            6  in
              933  POP_JUMP_IF_FALSE   952  'to 952'

 L.1237       936  LOAD_GLOBAL          19  'cfuncs'
              939  LOAD_ATTR            19  'cfuncs'
              942  LOAD_FAST            13  'k'
              945  BINARY_SUBSCR    
              946  STORE_FAST           24  'c'
              949  JUMP_FORWARD        111  'to 1063'

 L.1238       952  LOAD_FAST            13  'k'
              955  LOAD_GLOBAL          19  'cfuncs'
              958  LOAD_ATTR            28  'callbacks'
              961  COMPARE_OP            6  in
              964  POP_JUMP_IF_FALSE   983  'to 983'

 L.1239       967  LOAD_GLOBAL          19  'cfuncs'
              970  LOAD_ATTR            28  'callbacks'
              973  LOAD_FAST            13  'k'
              976  BINARY_SUBSCR    
              977  STORE_FAST           24  'c'
              980  JUMP_FORWARD         80  'to 1063'

 L.1240       983  LOAD_FAST            13  'k'
              986  LOAD_GLOBAL          19  'cfuncs'
              989  LOAD_ATTR            29  'f90modhooks'
              992  COMPARE_OP            6  in
              995  POP_JUMP_IF_FALSE  1014  'to 1014'

 L.1241       998  LOAD_GLOBAL          19  'cfuncs'
             1001  LOAD_ATTR            29  'f90modhooks'
             1004  LOAD_FAST            13  'k'
             1007  BINARY_SUBSCR    
             1008  STORE_FAST           24  'c'
             1011  JUMP_FORWARD         49  'to 1063'

 L.1242      1014  LOAD_FAST            13  'k'
             1017  LOAD_GLOBAL          19  'cfuncs'
             1020  LOAD_ATTR            30  'commonhooks'
             1023  COMPARE_OP            6  in
             1026  POP_JUMP_IF_FALSE  1045  'to 1045'

 L.1243      1029  LOAD_GLOBAL          19  'cfuncs'
             1032  LOAD_ATTR            30  'commonhooks'
             1035  LOAD_FAST            13  'k'
             1038  BINARY_SUBSCR    
             1039  STORE_FAST           24  'c'
             1042  JUMP_FORWARD         18  'to 1063'

 L.1245      1045  LOAD_GLOBAL           6  'errmess'
             1048  LOAD_CONST               'buildmodule: unknown need %s.\n'
             1051  LOAD_FAST            13  'k'
             1054  UNARY_CONVERT    
             1055  BINARY_MODULO    
             1056  CALL_FUNCTION_1       1  None
             1059  POP_TOP          
             1060  JUMP_BACK           723  'to 723'
           1063_0  COME_FROM          1042  '1042'
           1063_1  COME_FROM          1011  '1011'
           1063_2  COME_FROM           980  '980'
           1063_3  COME_FROM           949  '949'
           1063_4  COME_FROM           918  '918'
           1063_5  COME_FROM           887  '887'
           1063_6  COME_FROM           856  '856'
           1063_7  COME_FROM           825  '825'
           1063_8  COME_FROM           794  '794'
           1063_9  COME_FROM           763  '763'

 L.1246      1063  LOAD_FAST            23  'code'
             1066  LOAD_FAST             8  'n'
             1069  BINARY_SUBSCR    
             1070  LOAD_ATTR            10  'append'
             1073  LOAD_FAST            24  'c'
             1076  CALL_FUNCTION_1       1  None
             1079  POP_TOP          
             1080  JUMP_BACK           723  'to 723'
             1083  POP_BLOCK        
           1084_0  COME_FROM           712  '712'
             1084  JUMP_BACK           696  'to 696'
             1087  POP_BLOCK        
           1088_0  COME_FROM           683  '683'

 L.1247      1088  LOAD_FAST             3  'mod_rules'
             1091  LOAD_ATTR            10  'append'
             1094  LOAD_FAST            23  'code'
             1097  CALL_FUNCTION_1       1  None
             1100  POP_TOP          

 L.1248      1101  SETUP_LOOP           90  'to 1194'
             1104  LOAD_FAST             3  'mod_rules'
             1107  GET_ITER         
             1108  FOR_ITER             82  'to 1193'
             1111  STORE_FAST           25  'r'

 L.1249      1114  LOAD_CONST               '_check'
             1117  LOAD_FAST            25  'r'
             1120  COMPARE_OP            6  in
             1123  POP_JUMP_IF_FALSE  1142  'to 1142'
             1126  LOAD_FAST            25  'r'
             1129  LOAD_CONST               '_check'
             1132  BINARY_SUBSCR    
             1133  LOAD_FAST             0  'm'
             1136  CALL_FUNCTION_1       1  None
           1139_0  COME_FROM          1123  '1123'
             1139  POP_JUMP_IF_TRUE   1154  'to 1154'
             1142  LOAD_CONST               '_check'
             1145  LOAD_FAST            25  'r'
             1148  COMPARE_OP            7  not-in
           1151_0  COME_FROM          1139  '1139'
             1151  POP_JUMP_IF_FALSE  1108  'to 1108'

 L.1250      1154  LOAD_GLOBAL          13  'applyrules'
             1157  LOAD_FAST            25  'r'
             1160  LOAD_FAST             4  'vrd'
             1163  LOAD_FAST             0  'm'
             1166  CALL_FUNCTION_3       3  None
             1169  STORE_FAST           18  'ar'

 L.1251      1172  LOAD_GLOBAL           3  'dictappend'
             1175  LOAD_FAST             5  'rd'
             1178  LOAD_FAST            18  'ar'
             1181  CALL_FUNCTION_2       2  None
             1184  STORE_FAST            5  'rd'
             1187  JUMP_BACK          1108  'to 1108'
             1190  JUMP_BACK          1108  'to 1108'
             1193  POP_BLOCK        
           1194_0  COME_FROM          1101  '1101'

 L.1252      1194  LOAD_GLOBAL          13  'applyrules'
             1197  LOAD_GLOBAL          31  'module_rules'
             1200  LOAD_FAST             5  'rd'
             1203  CALL_FUNCTION_2       2  None
             1206  STORE_FAST           18  'ar'

 L.1254      1209  LOAD_GLOBAL          32  'os'
             1212  LOAD_ATTR            33  'path'
             1215  LOAD_ATTR            34  'join'
             1218  LOAD_GLOBAL          35  'options'
             1221  LOAD_CONST               'buildpath'
             1224  BINARY_SUBSCR    
             1225  LOAD_FAST             4  'vrd'
             1228  LOAD_CONST               'coutput'
             1231  BINARY_SUBSCR    
             1232  CALL_FUNCTION_2       2  None
             1235  STORE_FAST           26  'fn'

 L.1255      1238  LOAD_FAST            26  'fn'
             1241  LOAD_FAST             2  'ret'
             1244  LOAD_CONST               'csrc'
             1247  STORE_SUBSCR     

 L.1256      1248  LOAD_GLOBAL          36  'open'
             1251  LOAD_FAST            26  'fn'
             1254  LOAD_CONST               'w'
             1257  CALL_FUNCTION_2       2  None
             1260  STORE_FAST           27  'f'

 L.1257      1263  LOAD_FAST            27  'f'
             1266  LOAD_ATTR            37  'write'
             1269  LOAD_FAST            18  'ar'
             1272  LOAD_CONST               'modulebody'
             1275  BINARY_SUBSCR    
             1276  LOAD_ATTR            38  'replace'
             1279  LOAD_CONST               '\t'
             1282  LOAD_CONST               '  '
             1285  CALL_FUNCTION_2       2  None
             1288  CALL_FUNCTION_1       1  None
             1291  POP_TOP          

 L.1258      1292  LOAD_FAST            27  'f'
             1295  LOAD_ATTR            39  'close'
             1298  CALL_FUNCTION_0       0  None
             1301  POP_TOP          

 L.1259      1302  LOAD_GLOBAL           0  'outmess'
             1305  LOAD_CONST               '\tWrote C/API module "%s" to file "%s"\n'
             1308  LOAD_FAST             0  'm'
             1311  LOAD_CONST               'name'
             1314  BINARY_SUBSCR    
             1315  LOAD_FAST            26  'fn'
             1318  BUILD_TUPLE_2         2 
             1321  BINARY_MODULO    
             1322  CALL_FUNCTION_1       1  None
             1325  POP_TOP          

 L.1261      1326  LOAD_GLOBAL          35  'options'
             1329  LOAD_CONST               'dorestdoc'
             1332  BINARY_SUBSCR    
             1333  POP_JUMP_IF_FALSE  1464  'to 1464'

 L.1262      1336  LOAD_GLOBAL          32  'os'
             1339  LOAD_ATTR            33  'path'
             1342  LOAD_ATTR            34  'join'
             1345  LOAD_GLOBAL          35  'options'
             1348  LOAD_CONST               'buildpath'
             1351  BINARY_SUBSCR    
             1352  LOAD_FAST             4  'vrd'
             1355  LOAD_CONST               'modulename'
             1358  BINARY_SUBSCR    
             1359  LOAD_CONST               'module.rest'
             1362  BINARY_ADD       
             1363  CALL_FUNCTION_2       2  None
             1366  STORE_FAST           26  'fn'

 L.1263      1369  LOAD_GLOBAL          36  'open'
             1372  LOAD_FAST            26  'fn'
             1375  LOAD_CONST               'w'
             1378  CALL_FUNCTION_2       2  None
             1381  STORE_FAST           27  'f'

 L.1264      1384  LOAD_FAST            27  'f'
             1387  LOAD_ATTR            37  'write'
             1390  LOAD_CONST               '.. -*- rest -*-\n'
             1393  CALL_FUNCTION_1       1  None
             1396  POP_TOP          

 L.1265      1397  LOAD_FAST            27  'f'
             1400  LOAD_ATTR            37  'write'
             1403  LOAD_CONST               '\n'
             1406  LOAD_ATTR            34  'join'
             1409  LOAD_FAST            18  'ar'
             1412  LOAD_CONST               'restdoc'
             1415  BINARY_SUBSCR    
             1416  CALL_FUNCTION_1       1  None
             1419  CALL_FUNCTION_1       1  None
             1422  POP_TOP          

 L.1266      1423  LOAD_FAST            27  'f'
             1426  LOAD_ATTR            39  'close'
             1429  CALL_FUNCTION_0       0  None
             1432  POP_TOP          

 L.1267      1433  LOAD_GLOBAL           0  'outmess'
             1436  LOAD_CONST               '\tReST Documentation is saved to file "%s/%smodule.rest"\n'
             1439  LOAD_GLOBAL          35  'options'
             1442  LOAD_CONST               'buildpath'
             1445  BINARY_SUBSCR    
             1446  LOAD_FAST             4  'vrd'
             1449  LOAD_CONST               'modulename'
             1452  BINARY_SUBSCR    
             1453  BUILD_TUPLE_2         2 
             1456  BINARY_MODULO    
             1457  CALL_FUNCTION_1       1  None
             1460  POP_TOP          
             1461  JUMP_FORWARD          0  'to 1464'
           1464_0  COME_FROM          1461  '1461'

 L.1268      1464  LOAD_GLOBAL          35  'options'
             1467  LOAD_CONST               'dolatexdoc'
             1470  BINARY_SUBSCR    
             1471  POP_JUMP_IF_FALSE  1672  'to 1672'

 L.1269      1474  LOAD_GLOBAL          32  'os'
             1477  LOAD_ATTR            33  'path'
             1480  LOAD_ATTR            34  'join'
             1483  LOAD_GLOBAL          35  'options'
             1486  LOAD_CONST               'buildpath'
             1489  BINARY_SUBSCR    
             1490  LOAD_FAST             4  'vrd'
             1493  LOAD_CONST               'modulename'
             1496  BINARY_SUBSCR    
             1497  LOAD_CONST               'module.tex'
             1500  BINARY_ADD       
             1501  CALL_FUNCTION_2       2  None
             1504  STORE_FAST           26  'fn'

 L.1270      1507  LOAD_FAST            26  'fn'
             1510  LOAD_FAST             2  'ret'
             1513  LOAD_CONST               'ltx'
             1516  STORE_SUBSCR     

 L.1271      1517  LOAD_GLOBAL          36  'open'
             1520  LOAD_FAST            26  'fn'
             1523  LOAD_CONST               'w'
             1526  CALL_FUNCTION_2       2  None
             1529  STORE_FAST           27  'f'

 L.1272      1532  LOAD_FAST            27  'f'
             1535  LOAD_ATTR            37  'write'
             1538  LOAD_CONST               '%% This file is auto-generated with f2py (version:%s)\n'
             1541  LOAD_GLOBAL           4  'f2py_version'
             1544  BINARY_MODULO    
             1545  CALL_FUNCTION_1       1  None
             1548  POP_TOP          

 L.1273      1549  LOAD_CONST               'shortlatex'
             1552  LOAD_GLOBAL          35  'options'
             1555  COMPARE_OP            7  not-in
             1558  POP_JUMP_IF_FALSE  1577  'to 1577'

 L.1274      1561  LOAD_FAST            27  'f'
             1564  LOAD_ATTR            37  'write'
             1567  LOAD_CONST               '\\documentclass{article}\n\\usepackage{a4wide}\n\\begin{document}\n\\tableofcontents\n\n'
             1570  CALL_FUNCTION_1       1  None
             1573  POP_TOP          
             1574  JUMP_FORWARD          0  'to 1577'
           1577_0  COME_FROM          1574  '1574'

 L.1275      1577  LOAD_FAST            27  'f'
             1580  LOAD_ATTR            37  'write'
             1583  LOAD_CONST               '\n'
             1586  LOAD_ATTR            34  'join'
             1589  LOAD_FAST            18  'ar'
             1592  LOAD_CONST               'latexdoc'
             1595  BINARY_SUBSCR    
             1596  CALL_FUNCTION_1       1  None
             1599  CALL_FUNCTION_1       1  None
             1602  POP_TOP          

 L.1276      1603  LOAD_CONST               'shortlatex'
             1606  LOAD_GLOBAL          35  'options'
             1609  COMPARE_OP            7  not-in
             1612  POP_JUMP_IF_FALSE  1631  'to 1631'

 L.1277      1615  LOAD_FAST            27  'f'
             1618  LOAD_ATTR            37  'write'
             1621  LOAD_CONST               '\\end{document}'
             1624  CALL_FUNCTION_1       1  None
             1627  POP_TOP          
             1628  JUMP_FORWARD          0  'to 1631'
           1631_0  COME_FROM          1628  '1628'

 L.1278      1631  LOAD_FAST            27  'f'
             1634  LOAD_ATTR            39  'close'
             1637  CALL_FUNCTION_0       0  None
             1640  POP_TOP          

 L.1279      1641  LOAD_GLOBAL           0  'outmess'
             1644  LOAD_CONST               '\tDocumentation is saved to file "%s/%smodule.tex"\n'
             1647  LOAD_GLOBAL          35  'options'
             1650  LOAD_CONST               'buildpath'
             1653  BINARY_SUBSCR    
             1654  LOAD_FAST             4  'vrd'
             1657  LOAD_CONST               'modulename'
             1660  BINARY_SUBSCR    
             1661  BUILD_TUPLE_2         2 
             1664  BINARY_MODULO    
             1665  CALL_FUNCTION_1       1  None
             1668  POP_TOP          
             1669  JUMP_FORWARD          0  'to 1672'
           1672_0  COME_FROM          1669  '1669'

 L.1280      1672  LOAD_FAST             6  'funcwrappers'
             1675  POP_JUMP_IF_FALSE  2002  'to 2002'

 L.1281      1678  LOAD_GLOBAL          32  'os'
             1681  LOAD_ATTR            33  'path'
             1684  LOAD_ATTR            34  'join'
             1687  LOAD_GLOBAL          35  'options'
             1690  LOAD_CONST               'buildpath'
             1693  BINARY_SUBSCR    
             1694  LOAD_FAST             4  'vrd'
             1697  LOAD_CONST               'f2py_wrapper_output'
             1700  BINARY_SUBSCR    
             1701  CALL_FUNCTION_2       2  None
             1704  STORE_FAST           28  'wn'

 L.1282      1707  LOAD_FAST            28  'wn'
             1710  LOAD_FAST             2  'ret'
             1713  LOAD_CONST               'fsrc'
             1716  STORE_SUBSCR     

 L.1283      1717  LOAD_GLOBAL          36  'open'
             1720  LOAD_FAST            28  'wn'
             1723  LOAD_CONST               'w'
             1726  CALL_FUNCTION_2       2  None
             1729  STORE_FAST           27  'f'

 L.1284      1732  LOAD_FAST            27  'f'
             1735  LOAD_ATTR            37  'write'
             1738  LOAD_CONST               'C     -*- fortran -*-\n'
             1741  CALL_FUNCTION_1       1  None
             1744  POP_TOP          

 L.1285      1745  LOAD_FAST            27  'f'
             1748  LOAD_ATTR            37  'write'
             1751  LOAD_CONST               'C     This file is autogenerated with f2py (version:%s)\n'
             1754  LOAD_GLOBAL           4  'f2py_version'
             1757  BINARY_MODULO    
             1758  CALL_FUNCTION_1       1  None
             1761  POP_TOP          

 L.1286      1762  LOAD_FAST            27  'f'
             1765  LOAD_ATTR            37  'write'
             1768  LOAD_CONST               'C     It contains Fortran 77 wrappers to fortran functions.\n'
             1771  CALL_FUNCTION_1       1  None
             1774  POP_TOP          

 L.1287      1775  BUILD_LIST_0          0 
             1778  STORE_FAST           29  'lines'

 L.1288      1781  SETUP_LOOP          151  'to 1935'
             1784  LOAD_CONST               '\n\n'
             1787  LOAD_ATTR            34  'join'
             1790  LOAD_FAST             6  'funcwrappers'
             1793  CALL_FUNCTION_1       1  None
             1796  LOAD_CONST               '\n'
             1799  BINARY_ADD       
             1800  LOAD_ATTR            40  'split'
             1803  LOAD_CONST               '\n'
             1806  CALL_FUNCTION_1       1  None
             1809  GET_ITER         
             1810  FOR_ITER            121  'to 1934'
             1813  STORE_FAST           30  'l'

 L.1289      1816  LOAD_FAST            30  'l'
             1819  POP_JUMP_IF_FALSE  1914  'to 1914'
             1822  LOAD_FAST            30  'l'
             1825  LOAD_CONST               0
             1828  BINARY_SUBSCR    
             1829  LOAD_CONST               ' '
             1832  COMPARE_OP            2  ==
           1835_0  COME_FROM          1819  '1819'
             1835  POP_JUMP_IF_FALSE  1914  'to 1914'

 L.1290      1838  SETUP_LOOP           53  'to 1894'
             1841  LOAD_GLOBAL          41  'len'
             1844  LOAD_FAST            30  'l'
             1847  CALL_FUNCTION_1       1  None
             1850  LOAD_CONST               66
             1853  COMPARE_OP            5  >=
             1856  POP_JUMP_IF_FALSE  1893  'to 1893'

 L.1291      1859  LOAD_FAST            29  'lines'
             1862  LOAD_ATTR            10  'append'
             1865  LOAD_FAST            30  'l'
             1868  LOAD_CONST               66
             1871  SLICE+2          
             1872  LOAD_CONST               '\n     &'
             1875  BINARY_ADD       
             1876  CALL_FUNCTION_1       1  None
             1879  POP_TOP          

 L.1292      1880  LOAD_FAST            30  'l'
             1883  LOAD_CONST               66
             1886  SLICE+1          
             1887  STORE_FAST           30  'l'
             1890  JUMP_BACK          1841  'to 1841'
             1893  POP_BLOCK        
           1894_0  COME_FROM          1838  '1838'

 L.1293      1894  LOAD_FAST            29  'lines'
             1897  LOAD_ATTR            10  'append'
             1900  LOAD_FAST            30  'l'
             1903  LOAD_CONST               '\n'
             1906  BINARY_ADD       
             1907  CALL_FUNCTION_1       1  None
             1910  POP_TOP          
             1911  JUMP_BACK          1810  'to 1810'

 L.1294      1914  LOAD_FAST            29  'lines'
             1917  LOAD_ATTR            10  'append'
             1920  LOAD_FAST            30  'l'
             1923  LOAD_CONST               '\n'
             1926  BINARY_ADD       
             1927  CALL_FUNCTION_1       1  None
             1930  POP_TOP          
             1931  JUMP_BACK          1810  'to 1810'
             1934  POP_BLOCK        
           1935_0  COME_FROM          1781  '1781'

 L.1295      1935  LOAD_CONST               ''
             1938  LOAD_ATTR            34  'join'
             1941  LOAD_FAST            29  'lines'
             1944  CALL_FUNCTION_1       1  None
             1947  LOAD_ATTR            38  'replace'
             1950  LOAD_CONST               '\n     &\n'
             1953  LOAD_CONST               '\n'
             1956  CALL_FUNCTION_2       2  None
             1959  STORE_FAST           29  'lines'

 L.1296      1962  LOAD_FAST            27  'f'
             1965  LOAD_ATTR            37  'write'
             1968  LOAD_FAST            29  'lines'
             1971  CALL_FUNCTION_1       1  None
             1974  POP_TOP          

 L.1297      1975  LOAD_FAST            27  'f'
             1978  LOAD_ATTR            39  'close'
             1981  CALL_FUNCTION_0       0  None
             1984  POP_TOP          

 L.1298      1985  LOAD_GLOBAL           0  'outmess'
             1988  LOAD_CONST               '\tFortran 77 wrappers are saved to "%s"\n'
             1991  LOAD_FAST            28  'wn'
             1994  BINARY_MODULO    
             1995  CALL_FUNCTION_1       1  None
             1998  POP_TOP          
             1999  JUMP_FORWARD          0  'to 2002'
           2002_0  COME_FROM          1999  '1999'

 L.1299      2002  LOAD_FAST             7  'funcwrappers2'
             2005  POP_JUMP_IF_FALSE  2379  'to 2379'

 L.1300      2008  LOAD_GLOBAL          32  'os'
             2011  LOAD_ATTR            33  'path'
             2014  LOAD_ATTR            34  'join'
             2017  LOAD_GLOBAL          35  'options'
             2020  LOAD_CONST               'buildpath'
             2023  BINARY_SUBSCR    
             2024  LOAD_CONST               '%s-f2pywrappers2.f90'
             2027  LOAD_FAST             4  'vrd'
             2030  LOAD_CONST               'modulename'
             2033  BINARY_SUBSCR    
             2034  BINARY_MODULO    
             2035  CALL_FUNCTION_2       2  None
             2038  STORE_FAST           28  'wn'

 L.1301      2041  LOAD_FAST            28  'wn'
             2044  LOAD_FAST             2  'ret'
             2047  LOAD_CONST               'fsrc'
             2050  STORE_SUBSCR     

 L.1302      2051  LOAD_GLOBAL          36  'open'
             2054  LOAD_FAST            28  'wn'
             2057  LOAD_CONST               'w'
             2060  CALL_FUNCTION_2       2  None
             2063  STORE_FAST           27  'f'

 L.1303      2066  LOAD_FAST            27  'f'
             2069  LOAD_ATTR            37  'write'
             2072  LOAD_CONST               '!     -*- f90 -*-\n'
             2075  CALL_FUNCTION_1       1  None
             2078  POP_TOP          

 L.1304      2079  LOAD_FAST            27  'f'
             2082  LOAD_ATTR            37  'write'
             2085  LOAD_CONST               '!     This file is autogenerated with f2py (version:%s)\n'
             2088  LOAD_GLOBAL           4  'f2py_version'
             2091  BINARY_MODULO    
             2092  CALL_FUNCTION_1       1  None
             2095  POP_TOP          

 L.1305      2096  LOAD_FAST            27  'f'
             2099  LOAD_ATTR            37  'write'
             2102  LOAD_CONST               '!     It contains Fortran 90 wrappers to fortran functions.\n'
             2105  CALL_FUNCTION_1       1  None
             2108  POP_TOP          

 L.1306      2109  BUILD_LIST_0          0 
             2112  STORE_FAST           29  'lines'

 L.1307      2115  SETUP_LOOP          194  'to 2312'
             2118  LOAD_CONST               '\n\n'
             2121  LOAD_ATTR            34  'join'
             2124  LOAD_FAST             7  'funcwrappers2'
             2127  CALL_FUNCTION_1       1  None
             2130  LOAD_CONST               '\n'
             2133  BINARY_ADD       
             2134  LOAD_ATTR            40  'split'
             2137  LOAD_CONST               '\n'
             2140  CALL_FUNCTION_1       1  None
             2143  GET_ITER         
             2144  FOR_ITER            164  'to 2311'
             2147  STORE_FAST           30  'l'

 L.1308      2150  LOAD_GLOBAL          41  'len'
             2153  LOAD_FAST            30  'l'
             2156  CALL_FUNCTION_1       1  None
             2159  LOAD_CONST               72
             2162  COMPARE_OP            4  >
             2165  POP_JUMP_IF_FALSE  2291  'to 2291'
             2168  LOAD_FAST            30  'l'
             2171  LOAD_CONST               0
             2174  BINARY_SUBSCR    
             2175  LOAD_CONST               ' '
             2178  COMPARE_OP            2  ==
           2181_0  COME_FROM          2165  '2165'
             2181  POP_JUMP_IF_FALSE  2291  'to 2291'

 L.1309      2184  LOAD_FAST            29  'lines'
             2187  LOAD_ATTR            10  'append'
             2190  LOAD_FAST            30  'l'
             2193  LOAD_CONST               72
             2196  SLICE+2          
             2197  LOAD_CONST               '&\n     &'
             2200  BINARY_ADD       
             2201  CALL_FUNCTION_1       1  None
             2204  POP_TOP          

 L.1310      2205  LOAD_FAST            30  'l'
             2208  LOAD_CONST               72
             2211  SLICE+1          
             2212  STORE_FAST           30  'l'

 L.1311      2215  SETUP_LOOP           53  'to 2271'
             2218  LOAD_GLOBAL          41  'len'
             2221  LOAD_FAST            30  'l'
             2224  CALL_FUNCTION_1       1  None
             2227  LOAD_CONST               66
             2230  COMPARE_OP            4  >
             2233  POP_JUMP_IF_FALSE  2270  'to 2270'

 L.1312      2236  LOAD_FAST            29  'lines'
             2239  LOAD_ATTR            10  'append'
             2242  LOAD_FAST            30  'l'
             2245  LOAD_CONST               66
             2248  SLICE+2          
             2249  LOAD_CONST               '&\n     &'
             2252  BINARY_ADD       
             2253  CALL_FUNCTION_1       1  None
             2256  POP_TOP          

 L.1313      2257  LOAD_FAST            30  'l'
             2260  LOAD_CONST               66
             2263  SLICE+1          
             2264  STORE_FAST           30  'l'
             2267  JUMP_BACK          2218  'to 2218'
             2270  POP_BLOCK        
           2271_0  COME_FROM          2215  '2215'

 L.1314      2271  LOAD_FAST            29  'lines'
             2274  LOAD_ATTR            10  'append'
             2277  LOAD_FAST            30  'l'
             2280  LOAD_CONST               '\n'
             2283  BINARY_ADD       
             2284  CALL_FUNCTION_1       1  None
             2287  POP_TOP          
             2288  JUMP_BACK          2144  'to 2144'

 L.1315      2291  LOAD_FAST            29  'lines'
             2294  LOAD_ATTR            10  'append'
             2297  LOAD_FAST            30  'l'
             2300  LOAD_CONST               '\n'
             2303  BINARY_ADD       
             2304  CALL_FUNCTION_1       1  None
             2307  POP_TOP          
             2308  JUMP_BACK          2144  'to 2144'
             2311  POP_BLOCK        
           2312_0  COME_FROM          2115  '2115'

 L.1316      2312  LOAD_CONST               ''
             2315  LOAD_ATTR            34  'join'
             2318  LOAD_FAST            29  'lines'
             2321  CALL_FUNCTION_1       1  None
             2324  LOAD_ATTR            38  'replace'
             2327  LOAD_CONST               '\n     &\n'
             2330  LOAD_CONST               '\n'
             2333  CALL_FUNCTION_2       2  None
             2336  STORE_FAST           29  'lines'

 L.1317      2339  LOAD_FAST            27  'f'
             2342  LOAD_ATTR            37  'write'
             2345  LOAD_FAST            29  'lines'
             2348  CALL_FUNCTION_1       1  None
             2351  POP_TOP          

 L.1318      2352  LOAD_FAST            27  'f'
             2355  LOAD_ATTR            39  'close'
             2358  CALL_FUNCTION_0       0  None
             2361  POP_TOP          

 L.1319      2362  LOAD_GLOBAL           0  'outmess'
             2365  LOAD_CONST               '\tFortran 90 wrappers are saved to "%s"\n'
             2368  LOAD_FAST            28  'wn'
             2371  BINARY_MODULO    
             2372  CALL_FUNCTION_1       1  None
             2375  POP_TOP          
             2376  JUMP_FORWARD          0  'to 2379'
           2379_0  COME_FROM          2376  '2376'

 L.1320      2379  LOAD_FAST             2  'ret'
             2382  RETURN_VALUE     

Parse error at or near `COME_FROM' instruction at offset 1063_0


stnd = {1: 'st', 2: 'nd', 3: 'rd', 4: 'th', 5: 'th', 6: 'th', 7: 'th', 8: 'th', 9: 'th', 0: 'th'}

def buildapi(rout):
    rout, wrap = func2subr.assubr(rout)
    args, depargs = getargs2(rout)
    capi_maps.depargs = depargs
    var = rout['vars']
    auxvars = [ a for a in var.keys() if isintent_aux(var[a]) ]
    if ismoduleroutine(rout):
        outmess('\t\t\tConstructing wrapper function "%s.%s"...\n' % (rout['modulename'], rout['name']))
    else:
        outmess('\t\tConstructing wrapper function "%s"...\n' % rout['name'])
    vrd = routsign2map(rout)
    rd = dictappend({}, vrd)
    for r in rout_rules:
        if '_check' in r and r['_check'](rout) or '_check' not in r:
            ar = applyrules(r, vrd, rout)
            rd = dictappend(rd, ar)

    nth, nthk = (0, 0)
    savevrd = {}
    for a in args:
        vrd = sign2map(a, var[a])
        if isintent_aux(var[a]):
            _rules = aux_rules
        else:
            _rules = arg_rules
            if not isintent_hide(var[a]):
                if not isoptional(var[a]):
                    nth = nth + 1
                    vrd['nth'] = `nth` + stnd[nth % 10] + ' argument'
                else:
                    nthk = nthk + 1
                    vrd['nth'] = `nthk` + stnd[nthk % 10] + ' keyword'
            else:
                vrd['nth'] = 'hidden'
        savevrd[a] = vrd
        for r in _rules:
            if '_depend' in r:
                continue
            if '_check' in r and r['_check'](var[a]) or '_check' not in r:
                ar = applyrules(r, vrd, var[a])
                rd = dictappend(rd, ar)
                if '_break' in r:
                    break

    for a in depargs:
        if isintent_aux(var[a]):
            _rules = aux_rules
        else:
            _rules = arg_rules
        vrd = savevrd[a]
        for r in _rules:
            if '_depend' not in r:
                continue
            if '_check' in r and r['_check'](var[a]) or '_check' not in r:
                ar = applyrules(r, vrd, var[a])
                rd = dictappend(rd, ar)
                if '_break' in r:
                    break

        if 'check' in var[a]:
            for c in var[a]['check']:
                vrd['check'] = c
                ar = applyrules(check_rules, vrd, var[a])
                rd = dictappend(rd, ar)

    if type(rd['cleanupfrompyobj']) is types.ListType:
        rd['cleanupfrompyobj'].reverse()
    if type(rd['closepyobjfrom']) is types.ListType:
        rd['closepyobjfrom'].reverse()
    rd['docsignature'] = stripcomma(replace('#docsign##docsignopt##docsignxa#', {'docsign': rd['docsign'], 'docsignopt': rd['docsignopt'], 
       'docsignxa': rd['docsignxa']}))
    optargs = stripcomma(replace('#docsignopt##docsignxa#', {'docsignxa': rd['docsignxashort'], 'docsignopt': rd['docsignoptshort']}))
    if optargs == '':
        rd['docsignatureshort'] = stripcomma(replace('#docsign#', {'docsign': rd['docsign']}))
    else:
        rd['docsignatureshort'] = replace('#docsign#[#docsignopt#]', {'docsign': rd['docsign'], 'docsignopt': optargs})
    rd['latexdocsignatureshort'] = rd['docsignatureshort'].replace('_', '\\_')
    rd['latexdocsignatureshort'] = rd['latexdocsignatureshort'].replace(',', ', ')
    cfs = stripcomma(replace('#callfortran##callfortranappend#', {'callfortran': rd['callfortran'], 'callfortranappend': rd['callfortranappend']}))
    if len(rd['callfortranappend']) > 1:
        rd['callcompaqfortran'] = stripcomma(replace('#callfortran# 0,#callfortranappend#', {'callfortran': rd['callfortran'], 'callfortranappend': rd['callfortranappend']}))
    else:
        rd['callcompaqfortran'] = cfs
    rd['callfortran'] = cfs
    if type(rd['docreturn']) == types.ListType:
        rd['docreturn'] = stripcomma(replace('#docreturn#', {'docreturn': rd['docreturn']})) + ' = '
    rd['docstrsigns'] = []
    rd['latexdocstrsigns'] = []
    for k in ['docstrreq', 'docstropt', 'docstrout', 'docstrcbs']:
        if k in rd and type(rd[k]) == types.ListType:
            rd['docstrsigns'] = rd['docstrsigns'] + rd[k]
        k = 'latex' + k
        if k in rd and type(rd[k]) == types.ListType:
            rd['latexdocstrsigns'] = rd['latexdocstrsigns'] + rd[k][0:1] + ['\\begin{description}'] + rd[k][1:] + [
             '\\end{description}']

    if rd['keyformat'] or rd['xaformat']:
        argformat = rd['argformat']
        if isinstance(argformat, list):
            argformat.append('|')
        else:
            assert isinstance(argformat, str), repr((argformat, type(argformat)))
            rd['argformat'] += '|'
    ar = applyrules(routine_rules, rd)
    if ismoduleroutine(rout):
        outmess('\t\t\t  %s\n' % ar['docshort'])
    else:
        outmess('\t\t  %s\n' % ar['docshort'])
    return (
     ar, wrap)


# global f2py_version ## Warning: Unused global
# global options ## Warning: Unused global